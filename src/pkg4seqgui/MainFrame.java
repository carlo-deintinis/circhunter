/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg4seqgui;

import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.tree.DefaultTreeCellRenderer;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.text.JTextComponent;
import javax.swing.undo.UndoManager;
import java.io.*;
import java.util.prefs.Preferences;

/**
 *
 * @author beccuti
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {       
     
        initComponents();
        java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/dna.png");
        ImageIcon image = new ImageIcon(imgURL);
        
        DefaultTreeCellRenderer renderer =(DefaultTreeCellRenderer) AnalysisTree.getCellRenderer();
        renderer.setLeafIcon(image);
        imgURL = getClass().getResource("/pkg4seqgui/images/dna1.png");
        ImageIcon image2 = new ImageIcon(imgURL);
        renderer.setOpenIcon(image2);
        expandAllNodes(AnalysisTree, 0, AnalysisTree.getRowCount());
        
        Dimension leftPanelSize = LeftPanel.getSize();
        leftPanelSize.width = 200;
        LeftPanel.setMinimumSize(leftPanelSize);
        
        Dimension rnaPanelSize = command_panel_ch.getSize();
        rnaPanelSize.height = 350;
        ch_analysis_panel.setMinimumSize(rnaPanelSize);
        
//        splitPaneHoriz.setDividerLocation(0.6);
        //adding here all the textarea that must be maneged with right button mouse
        
        //vRNAPanel
        //contextMenu.add(vAdapter5Text);
/*        contextMenu.add(vAdapter3Text);
        contextMenu.add(vMinLengthText);
        contextMenu.add(vOrganismText);
        */
        //ConfigurationPanel
        contextMenu.add(hc_vkmer_size);
        
        
//loading main frame preference     
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
          
        String  WindowWidth= getPreferences().get("CircHunterGUI_WindowWidth", null);
        String  WindowHeight= getPreferences().get("CircHunterGUI_WindowHeight", null); 
        if ((WindowWidth!=null)&&(WindowHeight!=null)){
          setSize(Integer.valueOf(WindowWidth),Integer.valueOf(WindowHeight));  
        }
        else{
            setSize(screenSize.width*95/100,screenSize.height*95/100);
        }
//loading window preference  
//loading spline pannel preferences
        String HorSplPan = getPreferences().get("CircHunterGUI_HorizontalSplitPanel", null);
        if (HorSplPan!=null){
         HorizontalSplitPanel.setDividerLocation(Integer.valueOf(HorSplPan));   
        }
        else{
         HorizontalSplitPanel.setDividerLocation(screenSize.height*3/10);   
        }
  
        String VerSplPan = getPreferences().get("CircHunterGUI_VerticalSplitPanel", null);
        if (VerSplPan!=null){
            VerticalSplitPanel.setDividerLocation(Integer.valueOf(VerSplPan));
        }
        else {
        VerticalSplitPanel.setDividerLocation(screenSize.height*7/10);
        }
//loading spline pannel preferences

//loading output frame  preferences
        int OutputframeWidth= Integer.valueOf(getPreferences().get("CircHunterGUI_WindowOutputWidth", "0"));
        int OutputframeHeight= Integer.valueOf(getPreferences().get("CircHunterGUI_WindowOutputHeight", "0")); 
        if ((OutputframeWidth==0)||(OutputframeHeight==0)){
              OutputframeWidth=screenSize.width*4/100;
              OutputframeHeight=screenSize.height*5/100;
        }

        OutputFrame.setSize(OutputframeWidth,OutputframeHeight);
//loading output frame  preferences

        setLocationRelativeTo(null);
        invalidate();
        doLayout();
    }
    private static final long serialVersionUID = 5778212334L;
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        vExecution = new javax.swing.ButtonGroup();
        vSeq = new javax.swing.ButtonGroup();
        Strand = new javax.swing.ButtonGroup();
        Truncating = new javax.swing.ButtonGroup();
        Annotation = new javax.swing.ButtonGroup();
        mExecution = new javax.swing.ButtonGroup();
        mDownload = new javax.swing.ButtonGroup();
        mTrimmed = new javax.swing.ButtonGroup();
        OutputFrame = new javax.swing.JFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        OutputText = new javax.swing.JTextArea();
        CloseOutput = new javax.swing.JToggleButton();
        ReloadOutput = new javax.swing.JToggleButton();
        RemoveOutput = new javax.swing.JButton();
        IExecution = new javax.swing.ButtonGroup();
        ConfigurationFrame = new javax.swing.JFrame();
        jLabel18 = new javax.swing.JLabel();
        ParallelTextField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        ThreadTextField = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        Adapter5TextField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        Adapter3TextField = new javax.swing.JTextField();
        ConfCancell = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jMenuItem5 = new javax.swing.JMenuItem();
        AboutCirHunter = new javax.swing.JFrame();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        toolbar = new javax.swing.JToolBar();
        toolbar_open = new javax.swing.JButton();
        toolbar_save = new javax.swing.JButton();
        toolbar_settings = new javax.swing.JToggleButton();
        toolbar_rmdocker = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        VerticalSplitPanel = new javax.swing.JSplitPane();
        HorizontalSplitPanel = new javax.swing.JSplitPane();
        LeftPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AnalysisTree = new javax.swing.JTree();
        analysis_panel = new javax.swing.JPanel();
        logo_panel = new javax.swing.JScrollPane();
        EmptyPanel = new javax.swing.JPanel();
        gui_logo = new javax.swing.JLabel();
        ch_analysis_panel = new javax.swing.JScrollPane();
        command_panel_ch = new javax.swing.JPanel();
        button_close_ch = new javax.swing.JButton();
        button_execute_ch = new javax.swing.JButton();
        button_reset_ch = new javax.swing.JButton();
        button_saveconf_ch = new javax.swing.JButton();
        ch_execution = new javax.swing.JPanel();
        ch_execution_mode = new javax.swing.JLabel();
        ch_execution_c = new javax.swing.JCheckBox();
        ch_execution_s = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        ch_analysis_panel_files = new javax.swing.JPanel();
        circrna_list = new javax.swing.JLabel();
        vcircrna_list = new javax.swing.JTextField();
        bcircrna_list_browse = new javax.swing.JToggleButton();
        bcircrna_list_cancel = new javax.swing.JToggleButton();
        exon_export = new javax.swing.JLabel();
        vexon_export = new javax.swing.JTextField();
        bexon_export_browse = new javax.swing.JToggleButton();
        bexon_export_cancel = new javax.swing.JToggleButton();
        biomart_note = new javax.swing.JLabel();
        ch_analysis_panel_genome = new javax.swing.JPanel();
        genome = new javax.swing.JLabel();
        genome_selection = new javax.swing.JComboBox<>();
        genome_note = new javax.swing.JLabel();
        ch_output_folder = new javax.swing.JPanel();
        output_folder_ch = new javax.swing.JLabel();
        ch_voutput_folder = new javax.swing.JTextField();
        button_outputbrowse_ch = new javax.swing.JButton();
        button_outputcancel_ch = new javax.swing.JButton();
        hc_analysis_panel = new javax.swing.JScrollPane();
        command_panel_hc = new javax.swing.JPanel();
        button_close_hc = new javax.swing.JButton();
        button_execute_hc = new javax.swing.JButton();
        button_reset_hc = new javax.swing.JButton();
        button_saveconf_hc = new javax.swing.JButton();
        hc_analysis_panel_files = new javax.swing.JPanel();
        backsplicing_junction = new javax.swing.JLabel();
        vbacksplicing_junction = new javax.swing.JTextField();
        bbacksplicing_junction_browse = new javax.swing.JToggleButton();
        bbacksplicing_junction_cancel = new javax.swing.JToggleButton();
        supplied_rnaseq = new javax.swing.JLabel();
        vsupplied_rnaseq = new javax.swing.JTextField();
        bsupplied_rnaseq_browse = new javax.swing.JToggleButton();
        bsupplied_rnaseq_cancel = new javax.swing.JToggleButton();
        hc = new javax.swing.JPanel();
        hc_kmer_size = new javax.swing.JLabel();
        hc_vkmer_size = new javax.swing.JTextField();
        hc_thread = new javax.swing.JLabel();
        hc_vthread = new javax.swing.JTextField();
        hc_hash_size = new javax.swing.JLabel();
        hc_vhash_size = new javax.swing.JTextField();
        hc_collision_list_size = new javax.swing.JLabel();
        hc_vcollision_list_size = new javax.swing.JTextField();
        hc_num_kmer = new javax.swing.JLabel();
        hc_vnum_kmer = new javax.swing.JTextField();
        hc_matches = new javax.swing.JLabel();
        hc_vmatches = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        hc_output_folder = new javax.swing.JPanel();
        output_folder = new javax.swing.JLabel();
        hc_voutput_folder = new javax.swing.JTextField();
        button_outputbrowse_hc = new javax.swing.JButton();
        button_outputcancel_hc = new javax.swing.JButton();
        BottomPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ProcStatusPanel = new javax.swing.JPanel();
        ProcList = new javax.swing.JList<>();
        menu_bar = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        menu_file_open = new javax.swing.JMenuItem();
        menu_file_save = new javax.swing.JMenuItem();
        menu_file_exit = new javax.swing.JMenuItem();
        menu_edit = new javax.swing.JMenu();
        menu_edit_configure = new javax.swing.JMenuItem();
        menu_edit_rmdocker = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        OutputFrame.setTitle("Process Output");
        OutputFrame.setLocation(new java.awt.Point(100, 100));

        OutputText.setEditable(false);
        OutputText.setColumns(20);
        OutputText.setRows(5);
        jScrollPane3.setViewportView(OutputText);

        CloseOutput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        CloseOutput.setText("Close");
        CloseOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseOutputActionPerformed(evt);
            }
        });

        ReloadOutput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/reset.png"))); // NOI18N
        ReloadOutput.setText("Reload");
        ReloadOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReloadOutputActionPerformed(evt);
            }
        });

        RemoveOutput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/remove.png"))); // NOI18N
        RemoveOutput.setText("RemoveEntry");
        RemoveOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveOutputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout OutputFrameLayout = new javax.swing.GroupLayout(OutputFrame.getContentPane());
        OutputFrame.getContentPane().setLayout(OutputFrameLayout);
        OutputFrameLayout.setHorizontalGroup(
            OutputFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OutputFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OutputFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OutputFrameLayout.createSequentialGroup()
                        .addGap(0, 555, Short.MAX_VALUE)
                        .addComponent(ReloadOutput)
                        .addGap(18, 18, 18)
                        .addComponent(RemoveOutput)
                        .addGap(18, 18, 18)
                        .addComponent(CloseOutput))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        OutputFrameLayout.setVerticalGroup(
            OutputFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OutputFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(OutputFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CloseOutput)
                    .addComponent(ReloadOutput)
                    .addComponent(RemoveOutput))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        ConfigurationFrame.setTitle("Configuration");
        ConfigurationFrame.setLocation(new java.awt.Point(200, 200));
        ConfigurationFrame.setName("ConfigurationFrame"); // NOI18N
        ConfigurationFrame.setResizable(false);

        jLabel18.setText("Maximum number of parallel proceses:");

        jLabel19.setText("Maximum number of threads for process:");

        jLabel21.setText("Default adapter 5':");

        jLabel22.setText("Default adapter 3':");

        ConfCancell.setText("Cancel");
        ConfCancell.setToolTipText("");
        ConfCancell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfCancellActionPerformed(evt);
            }
        });

        jButton10.setText("Save&Close");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Reset");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ConfigurationFrameLayout = new javax.swing.GroupLayout(ConfigurationFrame.getContentPane());
        ConfigurationFrame.getContentPane().setLayout(ConfigurationFrameLayout);
        ConfigurationFrameLayout.setHorizontalGroup(
            ConfigurationFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigurationFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ConfigurationFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConfigurationFrameLayout.createSequentialGroup()
                        .addGroup(ConfigurationFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ConfigurationFrameLayout.createSequentialGroup()
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ParallelTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                            .addGroup(ConfigurationFrameLayout.createSequentialGroup()
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ThreadTextField)))
                        .addGap(627, 627, 627))
                    .addGroup(ConfigurationFrameLayout.createSequentialGroup()
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Adapter5TextField)
                        .addContainerGap())
                    .addGroup(ConfigurationFrameLayout.createSequentialGroup()
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Adapter3TextField)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ConfigurationFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton11)
                .addGap(18, 18, 18)
                .addComponent(jButton10)
                .addGap(18, 18, 18)
                .addComponent(ConfCancell)
                .addContainerGap())
        );
        ConfigurationFrameLayout.setVerticalGroup(
            ConfigurationFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigurationFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ConfigurationFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(ParallelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ConfigurationFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(ThreadTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ConfigurationFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(Adapter5TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ConfigurationFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(Adapter3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(ConfigurationFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfCancell)
                    .addComponent(jButton10)
                    .addComponent(jButton11))
                .addContainerGap())
        );

        jMenuItem5.setText("jMenuItem5");

        AboutCirHunter.setResizable(false);
        AboutCirHunter.getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel3.setIcon(new javax.swing.ImageIcon("/home/beccuti/GitLab/circhunter/src/pkg4seqgui/images/backgroundSmall.png")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        AboutCirHunter.getContentPane().add(jLabel3, gridBagConstraints);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/ok.png"))); // NOI18N
        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        AboutCirHunter.getContentPane().add(jButton1, gridBagConstraints);

        jLabel4.setText("Copyright © July 2017");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        AboutCirHunter.getContentPane().add(jLabel4, gridBagConstraints);

        jLabel5.setText("Version  1.0.1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        AboutCirHunter.getContentPane().add(jLabel5, gridBagConstraints);

        jLabel6.setText("Carlo De Intinis, Giulio Ferrero and Marco Beccuti");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        AboutCirHunter.getContentPane().add(jLabel6, gridBagConstraints);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CircHunterGUI");
        setMinimumSize(new java.awt.Dimension(500, 400));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        toolbar.setBackground(new java.awt.Color(237, 237, 237));
        toolbar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        toolbar.setRollover(true);

        toolbar_open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52.png"))); // NOI18N
        toolbar_open.setToolTipText("Open a previous execution");
        toolbar_open.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        toolbar_open.setFocusable(false);
        toolbar_open.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolbar_open.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolbar_openActionPerformed(evt);
            }
        });
        toolbar.add(toolbar_open);

        toolbar_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/86.png"))); // NOI18N
        toolbar_save.setToolTipText("Save current executions");
        toolbar_save.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 1, 10, 10));
        toolbar_save.setFocusable(false);
        toolbar_save.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolbar_save.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolbar_saveActionPerformed(evt);
            }
        });
        toolbar.add(toolbar_save);

        toolbar_settings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/preference.png"))); // NOI18N
        toolbar_settings.setToolTipText("Configure 4SeqGUI");
        toolbar_settings.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        toolbar_settings.setFocusable(false);
        toolbar_settings.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolbar_settings.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar_settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolbar_settingsActionPerformed(evt);
            }
        });
        toolbar.add(toolbar_settings);

        toolbar_rmdocker.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/docker.png"))); // NOI18N
        toolbar_rmdocker.setToolTipText("Remove docker containers");
        toolbar_rmdocker.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 1, 10, 10));
        toolbar_rmdocker.setFocusable(false);
        toolbar_rmdocker.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolbar_rmdocker.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar_rmdocker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolbar_rmdockerActionPerformed(evt);
            }
        });
        toolbar.add(toolbar_rmdocker);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/question.png"))); // NOI18N
        jButton3.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        toolbar.add(jButton3);

        getContentPane().add(toolbar, java.awt.BorderLayout.NORTH);

        VerticalSplitPanel.setDividerLocation(400);
        VerticalSplitPanel.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        VerticalSplitPanel.setResizeWeight(0.8);

        HorizontalSplitPanel.setDividerLocation(200);
        HorizontalSplitPanel.setResizeWeight(0.2);
        HorizontalSplitPanel.setPreferredSize(new java.awt.Dimension(600, 600));

        LeftPanel.setBackground(new java.awt.Color(255, 255, 255));
        LeftPanel.setPreferredSize(new java.awt.Dimension(100, 600));
        LeftPanel.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 400));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Tools");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Available Analysis");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("CircHunter");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Support");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("HashCirc");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        AnalysisTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        AnalysisTree.setMinimumSize(new java.awt.Dimension(128, 64));
        AnalysisTree.setPreferredSize(new java.awt.Dimension(128, 54));
        AnalysisTree.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                AnalysisTreeTreeExpanded(evt);
            }
        });
        AnalysisTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                AnalysisTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(AnalysisTree);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        LeftPanel.add(jScrollPane1, gridBagConstraints);

        HorizontalSplitPanel.setLeftComponent(LeftPanel);

        analysis_panel.setBackground(new java.awt.Color(255, 255, 255));
        analysis_panel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        analysis_panel.setPreferredSize(new java.awt.Dimension(1100, 715));
        analysis_panel.setLayout(new java.awt.CardLayout());

        logo_panel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        EmptyPanel.setBackground(new java.awt.Color(255, 255, 255));
        EmptyPanel.setPreferredSize(new java.awt.Dimension(500, 600));
        EmptyPanel.setVerifyInputWhenFocusTarget(false);
        EmptyPanel.setLayout(new java.awt.GridBagLayout());

        gui_logo.setBackground(new java.awt.Color(255, 255, 255));
        gui_logo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gui_logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/background.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        EmptyPanel.add(gui_logo, gridBagConstraints);

        logo_panel.setViewportView(EmptyPanel);

        analysis_panel.add(logo_panel, "Empty");

        command_panel_ch.setToolTipText("");
        command_panel_ch.setLayout(new java.awt.GridBagLayout());

        button_close_ch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/close.png"))); // NOI18N
        button_close_ch.setText("Close");
        button_close_ch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_close_chActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_ch.add(button_close_ch, gridBagConstraints);

        button_execute_ch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/exec.png"))); // NOI18N
        button_execute_ch.setText("Execute");
        button_execute_ch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_execute_chActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_ch.add(button_execute_ch, gridBagConstraints);

        button_reset_ch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/reset.png"))); // NOI18N
        button_reset_ch.setText("Reset");
        button_reset_ch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_reset_chActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_ch.add(button_reset_ch, gridBagConstraints);

        button_saveconf_ch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/86b.png"))); // NOI18N
        button_saveconf_ch.setText("Save conf.");
        button_saveconf_ch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_saveconf_chActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_ch.add(button_saveconf_ch, gridBagConstraints);

        ch_execution.setBackground(new java.awt.Color(230, 230, 235));
        ch_execution.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ch_execution.setLayout(new java.awt.GridBagLayout());

        ch_execution_mode.setText("Select jobs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 52);
        ch_execution.add(ch_execution_mode, gridBagConstraints);

        ch_execution_c.setBackground(new java.awt.Color(230, 230, 235));
        ch_execution_c.setText("circRNA classification");
        ch_execution_c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ch_execution_cActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        ch_execution.add(ch_execution_c, gridBagConstraints);

        ch_execution_s.setBackground(new java.awt.Color(230, 230, 235));
        ch_execution_s.setText("Backsplicing junction sequences");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        ch_execution.add(ch_execution_s, gridBagConstraints);

        jLabel2.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        ch_execution.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_ch.add(ch_execution, gridBagConstraints);

        ch_analysis_panel_files.setBackground(new java.awt.Color(230, 230, 235));
        ch_analysis_panel_files.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ch_analysis_panel_files.setLayout(new java.awt.GridBagLayout());

        circrna_list.setText("circRNA list file:");
        circrna_list.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 36);
        ch_analysis_panel_files.add(circrna_list, gridBagConstraints);

        vcircrna_list.setEditable(false);
        vcircrna_list.setToolTipText("circRNA list file whose format must be: chr, start, end, name stran");
        vcircrna_list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vcircrna_listActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ch_analysis_panel_files.add(vcircrna_list, gridBagConstraints);

        bcircrna_list_browse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        bcircrna_list_browse.setText("Browse");
        bcircrna_list_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcircrna_list_browseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ch_analysis_panel_files.add(bcircrna_list_browse, gridBagConstraints);

        bcircrna_list_cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        bcircrna_list_cancel.setText("Cancel");
        bcircrna_list_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcircrna_list_cancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ch_analysis_panel_files.add(bcircrna_list_cancel, gridBagConstraints);

        exon_export.setText("Biomart exon file:");
        exon_export.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ch_analysis_panel_files.add(exon_export, gridBagConstraints);

        vexon_export.setEditable(false);
        vexon_export.setToolTipText("");
        vexon_export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vexon_exportActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ch_analysis_panel_files.add(vexon_export, gridBagConstraints);

        bexon_export_browse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        bexon_export_browse.setText("Browse");
        bexon_export_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bexon_export_browseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ch_analysis_panel_files.add(bexon_export_browse, gridBagConstraints);

        bexon_export_cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        bexon_export_cancel.setText("Cancel");
        bexon_export_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bexon_export_cancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ch_analysis_panel_files.add(bexon_export_cancel, gridBagConstraints);

        biomart_note.setText("* Downloaded from Biomart if not supplied (slow)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 10, 10);
        ch_analysis_panel_files.add(biomart_note, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_ch.add(ch_analysis_panel_files, gridBagConstraints);

        ch_analysis_panel_genome.setBackground(new java.awt.Color(230, 230, 235));
        ch_analysis_panel_genome.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ch_analysis_panel_genome.setLayout(new java.awt.GridBagLayout());

        genome.setText("Genome assembly:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(10, 12, 10, 10);
        ch_analysis_panel_genome.add(genome, gridBagConstraints);

        genome_selection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "hg18 (Human Assembly NCBI36/hg18)", "hg19 (Human Assembly GRCh37/hg19)", "hg38 (Human Assembly GRCh38/hg38)" }));
        genome_selection.setSelectedIndex(1);
        genome_selection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genome_selectionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ch_analysis_panel_genome.add(genome_selection, gridBagConstraints);

        genome_note.setText("<html>hg19 is already available in the Docker environment."
            + "<br>"
            + "hg18 and hg38 will be downloaded and installed.</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ch_analysis_panel_genome.add(genome_note, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_ch.add(ch_analysis_panel_genome, gridBagConstraints);

        ch_output_folder.setBackground(new java.awt.Color(230, 230, 235));
        ch_output_folder.setLayout(new java.awt.GridBagLayout());

        output_folder_ch.setText("Output folder:");
        output_folder_ch.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 46);
        ch_output_folder.add(output_folder_ch, gridBagConstraints);

        ch_voutput_folder.setEditable(false);
        ch_voutput_folder.setToolTipText("The folder containing the indexed genome.");
        ch_voutput_folder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ch_voutput_folderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ch_output_folder.add(ch_voutput_folder, gridBagConstraints);

        button_outputbrowse_ch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        button_outputbrowse_ch.setText("Browse");
        button_outputbrowse_ch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_outputbrowse_chActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ch_output_folder.add(button_outputbrowse_ch, gridBagConstraints);

        button_outputcancel_ch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        button_outputcancel_ch.setText("Cancel");
        button_outputcancel_ch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_outputcancel_chActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ch_output_folder.add(button_outputcancel_ch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_ch.add(ch_output_folder, gridBagConstraints);

        ch_analysis_panel.setViewportView(command_panel_ch);

        analysis_panel.add(ch_analysis_panel, "ch_analysis_panel");

        command_panel_hc.setToolTipText("");
        command_panel_hc.setLayout(new java.awt.GridBagLayout());

        button_close_hc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/close.png"))); // NOI18N
        button_close_hc.setText("Close");
        button_close_hc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_close_hcActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_hc.add(button_close_hc, gridBagConstraints);

        button_execute_hc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/exec.png"))); // NOI18N
        button_execute_hc.setText("Execute");
        button_execute_hc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_execute_hcActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_hc.add(button_execute_hc, gridBagConstraints);

        button_reset_hc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/reset.png"))); // NOI18N
        button_reset_hc.setText("Reset");
        button_reset_hc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_reset_hcActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_hc.add(button_reset_hc, gridBagConstraints);

        button_saveconf_hc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/86b.png"))); // NOI18N
        button_saveconf_hc.setText("Save conf.");
        button_saveconf_hc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_saveconf_hcActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_hc.add(button_saveconf_hc, gridBagConstraints);

        hc_analysis_panel_files.setBackground(new java.awt.Color(230, 230, 235));
        hc_analysis_panel_files.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        hc_analysis_panel_files.setLayout(new java.awt.GridBagLayout());

        backsplicing_junction.setText("Backsplicing junction file:");
        backsplicing_junction.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc_analysis_panel_files.add(backsplicing_junction, gridBagConstraints);

        vbacksplicing_junction.setEditable(false);
        vbacksplicing_junction.setToolTipText("The folder containing the indexed genome.");
        vbacksplicing_junction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vbacksplicing_junctionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc_analysis_panel_files.add(vbacksplicing_junction, gridBagConstraints);

        bbacksplicing_junction_browse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        bbacksplicing_junction_browse.setText("Browse");
        bbacksplicing_junction_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bbacksplicing_junction_browseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc_analysis_panel_files.add(bbacksplicing_junction_browse, gridBagConstraints);

        bbacksplicing_junction_cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        bbacksplicing_junction_cancel.setText("Cancel");
        bbacksplicing_junction_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bbacksplicing_junction_cancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc_analysis_panel_files.add(bbacksplicing_junction_cancel, gridBagConstraints);

        supplied_rnaseq.setText("Supplied RNA-Seq file:");
        supplied_rnaseq.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc_analysis_panel_files.add(supplied_rnaseq, gridBagConstraints);

        vsupplied_rnaseq.setEditable(false);
        vsupplied_rnaseq.setToolTipText("The folder containing the indexed genome.");
        vsupplied_rnaseq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vsupplied_rnaseqActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc_analysis_panel_files.add(vsupplied_rnaseq, gridBagConstraints);

        bsupplied_rnaseq_browse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        bsupplied_rnaseq_browse.setText("Browse");
        bsupplied_rnaseq_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bsupplied_rnaseq_browseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc_analysis_panel_files.add(bsupplied_rnaseq_browse, gridBagConstraints);

        bsupplied_rnaseq_cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        bsupplied_rnaseq_cancel.setText("Cancel");
        bsupplied_rnaseq_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bsupplied_rnaseq_cancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc_analysis_panel_files.add(bsupplied_rnaseq_cancel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_hc.add(hc_analysis_panel_files, gridBagConstraints);

        hc.setBackground(new java.awt.Color(230, 230, 235));
        hc.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        hc.setLayout(new java.awt.GridBagLayout());

        hc_kmer_size.setText("k-mer size:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc.add(hc_kmer_size, gridBagConstraints);

        hc_vkmer_size.setToolTipText("input k-mer length");
        hc_vkmer_size.setMinimumSize(new java.awt.Dimension(100, 28));
        hc_vkmer_size.setPreferredSize(new java.awt.Dimension(100, 28));
        hc_vkmer_size.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hc_vkmer_sizeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 78, 10, 10);
        hc.add(hc_vkmer_size, gridBagConstraints);
        hc_vkmer_size.getAccessibleContext().setAccessibleDescription("");

        hc_thread.setText("thread number:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc.add(hc_thread, gridBagConstraints);

        hc_vthread.setToolTipText("input k-mer length");
        hc_vthread.setPreferredSize(new java.awt.Dimension(100, 28));
        hc_vthread.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hc_vthreadActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 78, 10, 10);
        hc.add(hc_vthread, gridBagConstraints);

        hc_hash_size.setText("hash size:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc.add(hc_hash_size, gridBagConstraints);

        hc_vhash_size.setPreferredSize(new java.awt.Dimension(100, 28));
        hc_vhash_size.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hc_vhash_sizeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 78, 10, 10);
        hc.add(hc_vhash_size, gridBagConstraints);

        hc_collision_list_size.setText("collision list size:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc.add(hc_collision_list_size, gridBagConstraints);

        hc_vcollision_list_size.setPreferredSize(new java.awt.Dimension(100, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc.add(hc_vcollision_list_size, gridBagConstraints);

        hc_num_kmer.setText("k-mer number:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc.add(hc_num_kmer, gridBagConstraints);

        hc_vnum_kmer.setPreferredSize(new java.awt.Dimension(100, 28));
        hc_vnum_kmer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hc_vnum_kmerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc.add(hc_vnum_kmer, gridBagConstraints);

        hc_matches.setText("matches:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc.add(hc_matches, gridBagConstraints);

        hc_vmatches.setPreferredSize(new java.awt.Dimension(100, 28));
        hc_vmatches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hc_vmatchesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc.add(hc_vmatches, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        hc.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_hc.add(hc, gridBagConstraints);

        hc_output_folder.setBackground(new java.awt.Color(230, 230, 235));
        hc_output_folder.setLayout(new java.awt.GridBagLayout());

        output_folder.setText("Output folder:");
        output_folder.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc_output_folder.add(output_folder, gridBagConstraints);

        hc_voutput_folder.setEditable(false);
        hc_voutput_folder.setToolTipText("The folder containing the indexed genome.");
        hc_voutput_folder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hc_voutput_folderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 91, 10, 10);
        hc_output_folder.add(hc_voutput_folder, gridBagConstraints);

        button_outputbrowse_hc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        button_outputbrowse_hc.setText("Browse");
        button_outputbrowse_hc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_outputbrowse_hcActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc_output_folder.add(button_outputbrowse_hc, gridBagConstraints);

        button_outputcancel_hc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        button_outputcancel_hc.setText("Cancel");
        button_outputcancel_hc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_outputcancel_hcActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        hc_output_folder.add(button_outputcancel_hc, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        command_panel_hc.add(hc_output_folder, gridBagConstraints);

        hc_analysis_panel.setViewportView(command_panel_hc);

        analysis_panel.add(hc_analysis_panel, "hc_analysis_panel");

        HorizontalSplitPanel.setRightComponent(analysis_panel);

        VerticalSplitPanel.setTopComponent(HorizontalSplitPanel);

        BottomPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        BottomPanel.setLayout(new java.awt.GridBagLayout());

        ProcStatusPanel.setLayout(new java.awt.GridBagLayout());

        ProcList.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ProcList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ProcList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProcListMouseClicked(evt);
            }
        });
        ProcList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ProcListValueChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        ProcStatusPanel.add(ProcList, gridBagConstraints);

        jScrollPane2.setViewportView(ProcStatusPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        BottomPanel.add(jScrollPane2, gridBagConstraints);

        VerticalSplitPanel.setBottomComponent(BottomPanel);

        getContentPane().add(VerticalSplitPanel, java.awt.BorderLayout.CENTER);

        menu_bar.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        menu_file.setText("File");

        menu_file_open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menu_file_open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52.png"))); // NOI18N
        menu_file_open.setText("Open");
        menu_file_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_file_openActionPerformed(evt);
            }
        });
        menu_file.add(menu_file_open);

        menu_file_save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menu_file_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/86.png"))); // NOI18N
        menu_file_save.setText("Save");
        menu_file_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_file_saveActionPerformed(evt);
            }
        });
        menu_file.add(menu_file_save);

        menu_file_exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        menu_file_exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33.png"))); // NOI18N
        menu_file_exit.setText("Exit");
        menu_file_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_file_exitActionPerformed(evt);
            }
        });
        menu_file.add(menu_file_exit);

        menu_bar.add(menu_file);

        menu_edit.setText("Edit");

        menu_edit_configure.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        menu_edit_configure.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/preference.png"))); // NOI18N
        menu_edit_configure.setText("Configure CircHunterGUI");
        menu_edit_configure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_edit_configureActionPerformed(evt);
            }
        });
        menu_edit.add(menu_edit_configure);

        menu_edit_rmdocker.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        menu_edit_rmdocker.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/docker.png"))); // NOI18N
        menu_edit_rmdocker.setText("Remove Docker Containers");
        menu_edit_rmdocker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_edit_rmdockerActionPerformed(evt);
            }
        });
        menu_edit.add(menu_edit_rmdocker);

        menu_bar.add(menu_edit);

        jMenu3.setText("?");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/question.png"))); // NOI18N
        jMenuItem1.setText("About CircHunter");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        menu_bar.add(jMenu3);

        setJMenuBar(menu_bar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private void AnalysisTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_AnalysisTreeValueChanged
        // TODO add your handling code here:
        //jTextField1.setText(evt.getNewLeadSelectionPath().getLastPathComponent().toString());
 
       //to menage clear selection!!
       if (evt.getNewLeadSelectionPath()==null)
           return;
       
        CardLayout card = (CardLayout)analysis_panel.getLayout();
        if (evt.getNewLeadSelectionPath().getLastPathComponent().toString()=="CircHunter" ){
            //vThreadText.setText(Integer.toString(GS.getDefaultThread()));
//            vAdapter5Text.setText(GS.getDefaultAdapter5());
  //          vAdapter3Text.setText(GS.getDefaultAdapter3());
            card.show(analysis_panel, "ch_analysis_panel");
            analysis_panel.revalidate();
            CurrentLayout="ch_analysis_panel";
        }
        else if (evt.getNewLeadSelectionPath().getLastPathComponent().toString()=="HashCirc" ){
            card.show(analysis_panel, "hc_analysis_panel");
            analysis_panel.revalidate();
            CurrentLayout="hc_analysis_panel";
        }
    }//GEN-LAST:event_AnalysisTreeValueChanged

        private static final Pattern adapter = Pattern.compile("[acgtACGT]+"
);
        
        private static final Pattern org = Pattern.compile("[a-zA-Z0-9]+"
);
    
        private static final Pattern miRBase = Pattern.compile("[a-zA-Z0-9]{3,3}"
);    
    
    private void configurationMenuItemActionPerformed(java.awt.event.ActionEvent evt){
        ConfigurationFrame.pack();
        ConfigurationFrame.setVisible(true);
        ParallelTextField.setText(Integer.toString(GS.getMaxSizelistProcRunning()));
        ThreadTextField.setText(Integer.toString(GS.getDefaultThread()));
        Adapter5TextField.setText(GS.getDefaultAdapter5());
        Adapter3TextField.setText(GS.getDefaultAdapter3());
        
    }
    
     private void  removeDockerContainer(java.awt.event.ActionEvent evt){
        
        String[] cmd = {"/bin/bash","-c"," docker rm $(docker ps -q -f status=exited)"}; 
        try{
            Runtime.getRuntime().exec(cmd);
            }
        catch (IOException e){
            System.out.println("No docker caintainers are removed\n");
        } 
     }
    
    
      private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
         
        if (CurrentLayout!="Empty"){ 
            JFileChooser openFile = new JFileChooser();
            if (openFile.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
                try{
                File f = openFile.getSelectedFile();
                FileReader fw = new FileReader(f.getAbsoluteFile());
                BufferedReader br = new BufferedReader(fw);
                if (CurrentLayout=="vmRNA"){
                    int line=0;
                    //chekc right file
                    String y=br.readLine();
                    System.out.print("*"+y+"*\n");
                    if (!y.equals("vmRNA")){
                        throw(new NumberFormatException());
                    }              
                    for (String x = br.readLine(); x != null; x = br.readLine()){
                        switch (line){
                            case 0:
                         //   if (x.equals("sudo"))
                           //     vSudoRadioButton.setSelected(true);
                           // else
                             //   vDockerRadioButton.setSelected(true);
                           // break;
                            case 1:
                                vcircrna_list.setText(x);
                            break;
                            case 2:
                                vexon_export.setText(x);
                            break; 
                            case 3:
                             //  vAdapter5Text.setText(x);
                            break;  
/*                            
                            case 4:
                                vAdapter3Text.setText(x);
                            break; 
                            case 5:
                              if (x.equals("se"))
                                vSeRadioButton.setSelected(true);
                            else
                                vPeRadioButton.setSelected(true);  
                            break;
                            case 6:
                          //      vThreadText.setText(x);
                            break;
                            case 7:
                                vMinLengthText.setText(x);
                            break;
                            case 8:
                                vJunctionText.setText(x);
                            break;
                            case 9:
                              if (x.equals("none"))
                                vSNoneRadioButton.setSelected(true);
                              else
                                  if (x.equals("forward"))
                                    vSForwardRadioButton.setSelected(true);
                                  else
                                    vSReverseRadioButton.setSelected(true);
                            break;
                            case 10:
                                if (x.equals("TRUE"))
                                     vTyesRadioButton.setSelected(true);
                                else
                                    vTnoRadioButton.setSelected(true);  
                            break;
                            case 11:
                                if (x.equals("gtfENSEMBL"))
                                    vBAMnoLRadioButton.setSelected(true);
                                else
                                    vBAMyesRadioButton.setSelected(true);  
                            break;
*/                            
                            default:
                                System.out.print("Too much lines\n");
                            throw(new NumberFormatException()); 
                        }
                    line++;
                    } 
                }else{
                }
                br.close();
                }
                catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error opening file","Error",JOptionPane.ERROR_MESSAGE);
                }
                catch (NumberFormatException e) {
                  JOptionPane.showMessageDialog(this, "Error reading file","Error",JOptionPane.ERROR_MESSAGE);
                }
            }
            
        }
    } 
    
    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        if (CurrentLayout!="Empty"){      
            JFileChooser saveFile = new JFileChooser();
            if (saveFile.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
                try        
                {               
                    File f = saveFile.getSelectedFile();              
                    if (!f.exists()) {
                        f.createNewFile();
                    }
                    FileWriter fw = new FileWriter(f.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);

                    if (CurrentLayout=="vmRNA"){  
                        bw.write("vmRNA\n");
                    //    if (vSudoRadioButton.isSelected()){
                    //        bw.write("sudo\n");                
                    //    }                
                    //    else{
                    //        bw.write("docker\n");
                    //    }
                        bw.write(vcircrna_list.getText());
                        bw.write("\n");
                        bw.write(vexon_export.getText());
                        bw.write("\n");
                     //   bw.write(vAdapter5Text.getText());
                        bw.write("\n");
/*                        
                        bw.write(vAdapter3Text.getText());
                        bw.write("\n");
                        if (vPeRadioButton.isSelected()){
                            bw.write("pe\n");
                        }
                        else{
                            bw.write("se\n");
                        }
                    //    bw.write(vThreadText.getText());
                    //   bw.write("\n");
/*                        bw.write(vMinLengthText.getText());
                        bw.write("\n");
                        bw.write(vJunctionText.getText());
                        bw.write("\n");
                        if (vSNoneRadioButton.isSelected())
                            bw.write("none\n");
                        else
                            if (vSForwardRadioButton.isSelected())  
                                bw.write("forward\n");
                            else
                                bw.write("reverse\n");
                        if (vTyesRadioButton.isSelected())
                            bw.write("TRUE\n");
                        else
                            bw.write("FALSE\n");
                
                        if (vBAMnoLRadioButton.isSelected())
                            bw.write("gtfENSEMBL\n");
                        else
                            bw.write("biocENSEMBL\n");
                    */
                    }
                    else
                    {}
                  
               
                    bw.close();
                    JOptionPane.showMessageDialog(this,"File "+f.getName()+" saved","Save",JOptionPane.INFORMATION_MESSAGE);
            
                }
             
                catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error saving file","Error",JOptionPane.ERROR_MESSAGE);
                }
            }
        }
                
    }   
    
    
    private void toolbar_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolbar_saveActionPerformed
        //saveAsMenuItemActionPerformed(evt);
        String executionstate = "";
            
            if (ch_execution_c.isSelected() && ch_execution_s.isSelected()){            
                executionstate += "f";
            }
            else if (ch_execution_c.isSelected()) {
                executionstate += "c";
            }
            else if (ch_execution_s.isSelected()) {
                executionstate += "s";
            }

        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            FileOutputStream stream = null;
            PrintStream out = null;
            try {
                File file = chooser.getSelectedFile();
                stream = new FileOutputStream(file); 
                String text = "vcircrna_list:" + vcircrna_list.getText() + "\n"
                        + "vexon_export:" + vexon_export.getText() + "\n"
                        + "ch_voutput_folder:" + ch_voutput_folder.getText() + "\n"
                        + "genome_selection:" + genome_selection.getSelectedIndex() +"\n"
                        + "execution_state:" + executionstate + "\n"
                        + "vbacksplicing_junction:" + vbacksplicing_junction.getText() + "\n"
                        + "vsupplied_rnaseq:" + vsupplied_rnaseq.getText() + "\n"
                        + "hc_vkmer_size:" + hc_vkmer_size.getText() + "\n"
                        + "hc_vthread:" + hc_vthread.getText() + "\n"
                        + "hc_vhash_size:" + hc_vhash_size.getText() + "\n"
                        + "hc_vcollision_list_size:" + hc_vcollision_list_size.getText() + "\n"
                        + "hc_vnum_kmer:" + hc_vnum_kmer.getText() + "\n"
                        + "hc_vmatches:" + hc_vmatches.getText() + "\n"
                        + "hc_voutput_folder:" + hc_voutput_folder.getText() + "\n";
                out = new PrintStream(stream);
                out.print(text);                  //This will overwrite existing contents

            } catch (Exception ex) {
                //do something
            } finally {
                try {
                    if(stream!=null) stream.close();
                    if(out!=null) out.close();
                } catch (Exception ex) {
                    //do something
                }
            }
        }
    }//GEN-LAST:event_toolbar_saveActionPerformed

    private void toolbar_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolbar_openActionPerformed
        // TODO add your handling code here:
        // openMenuItemActionPerformed(evt);
        JFileChooser openFile = new JFileChooser();
        
        if (openFile.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            try{
                String line;
                File f = openFile.getSelectedFile();
                FileReader fw = new FileReader(f.getAbsoluteFile());
                BufferedReader br = new BufferedReader(fw);
                
//                int line=0;
//                for (String x = br.readLine(); x != null; x = br.readLine()){
//                    //String[] saved_data = x.split(":");
//                    switch (line){
//                        case 0:
//                            vcircrna_list.setText(x);
//                    }
//                }

                while ((line = br.readLine()) != null) {
                    // Deal with the line
                    String[] content = line.split(":");
                                        
                    if (content[0].equals("vcircrna_list")){
                        vcircrna_list.setText(content[1]);    
                    } else if (content[0].equals("vexon_export")){
                        vexon_export.setText(content[1]);
                    } else if (content[0].equals("ch_voutput_folder")){
                        ch_voutput_folder.setText(content[1]);
                    } else if (content[0].equals("vbacksplicing_junction")){
                        vbacksplicing_junction.setText(content[1]);
                    } else if (content[0].equals("vsupplied_rnaseq")){
                        vsupplied_rnaseq.setText(content[1]);
                    } else if (content[0].equals("hc_vkmer_size")){
                        hc_vkmer_size.setText(content[1]);
                    } else if (content[0].equals("hc_vthread")){
                        hc_vthread.setText(content[1]);
                    } else if (content[0].equals("hc_vhash_size")){
                        hc_vhash_size.setText(content[1]);
                    } else if (content[0].equals("hc_vcollision_list_size")){
                        hc_vcollision_list_size.setText(content[1]);
                    } else if (content[0].equals("hc_vnum_kmer")){
                        hc_vnum_kmer.setText(content[1]);
                    } else if (content[0].equals("hc_vmatches")){
                        hc_vmatches.setText(content[1]);
                    } else if (content[0].equals("hc_voutput_folder")){
                        hc_voutput_folder.setText(content[1]);
                    } else if (content[0].equals("execution_state")){
                        if (content[1].equals("c") || content[1].equals("f")){
                            ch_execution_c.setSelected(rootPaneCheckingEnabled);
                        }
                        if (content[1].equals("s") || content[1].equals("f")){
                            ch_execution_s.setSelected(rootPaneCheckingEnabled);
                        }
                    } else if (content[0].equals("genome_selection")){
                        Integer gi = Integer.parseInt(content[1]);
                        genome_selection.setSelectedIndex(gi);
                    
                    }

                    }
                }


            catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error opening file","Error",JOptionPane.ERROR_MESSAGE);
                }
            }
        
    }//GEN-LAST:event_toolbar_openActionPerformed

    private void ProcListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ProcListValueChanged
        
      
        if (!evt.getValueIsAdjusting()){
            
        //System.out.println("****Open ProcListValueChanged : \n"+GL.getAvoidProcListValueChanged()+" "+GL.getListProcStatuSelection()+" "+evt.getLastIndex());
        if ((GL.getAvoidProcListValueChanged()==-1)){
           // GL.setAvoidProcListValueChanged(0);
            return;
        }
        //if (evt.getLastIndex()<0 ||evt.getLastIndex()>=listModel.getSize()){
        //    return;
        //}
  
        if ((evt!=null)){
        OutputFrame.pack();
        OutputFrame.setVisible(true);
        //System.out.println("QUII->-Inizio\n"+listModel.getSize()+" "+evt.getLastIndex()+"\n"+evt.getSource());
        ListEntry tmpListEntry;
        if ((evt.getLastIndex()!=GL.getListProcStatuSelection()&& (evt.getLastIndex()>=0 && evt.getLastIndex()<listModel.getSize())) ){
                tmpListEntry=  listModel.get(evt.getLastIndex());
                GL.setListProcStatuSelection(evt.getLastIndex());
                
                   //System.out.println("\t------- Selected Last\n");
        }
        else    {
                if (evt.getFirstIndex()>=0 && evt.getFirstIndex()<listModel.getSize()){
                tmpListEntry=  listModel.get(evt.getFirstIndex());
                 //System.out.println("\t------- Selected First\n");
                GL.setListProcStatuSelection(evt.getFirstIndex());
                }
                else
                    return;
        }
        
        if (tmpListEntry.status.equals("Running") || tmpListEntry.status.equals("Finished")){ 
            //System.out.println("\tQUII->-RUNNING\n");
            String text="";
            OutputText.setEnabled(true);
            try{
                String outputfile="/Routput.Rout";
                System.out.println(tmpListEntry.value);
                if (tmpListEntry.value.equals("HashCirc workflow "))
                    outputfile="/HashCircOutput.out";
                File file = new File( tmpListEntry.path+outputfile);
                BufferedReader reader = new BufferedReader(new FileReader(file));
                String strLine;
                //Read File Line By Line
                while ((strLine = reader.readLine()) != null)   {
                    text+="\n"+strLine;
                }
                reader.close();    
            }
            catch (Exception e){//Catch exception if any
                //System.err.println("Error: " + e.getMessage());
                JOptionPane.showMessageDialog(this, "Error reading file","Error",JOptionPane.ERROR_MESSAGE);
            }
            OutputText.setText(text);
        }
        else
        {
          OutputText.setEnabled(false);  
          //System.out.println("\tQUIFINE WAITING\n");
        }
        //System.out.println("QUIFINE\n");
        //GL.setListProcStatuSelection(evt.getLastIndex());
        //System.out.println("End ProcListValueChanged\n");
        }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_ProcListValueChanged

    private void CloseOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseOutputActionPerformed
    OutputFrame.setVisible(false);        // TODO add your handling code here:
    OutputText.setText("");
    OutputText.setEnabled(true);
    
    GL.setAvoidProcListValueChanged(-1);
    //GL.setListProcStatuSelection(-1);  
    ProcList.clearSelection();
    GL.setAvoidProcListValueChanged(0);
    //System.out.println("@@@@@@@@@@@@Close: \n");xx
    getPreferences().put("CircHunterGUI_WindowOutputWidth", Integer.toString(OutputFrame.getWidth()));
    getPreferences().put("CircHunterGUI_WindowOutputHeight", Integer.toString(OutputFrame.getHeight())); 
    }//GEN-LAST:event_CloseOutputActionPerformed

    private void ProcListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProcListMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_ProcListMouseClicked

    private void ReloadOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReloadOutputActionPerformed
        // TODO add your handling code here:
         ///System.out.println("Reload: \n"+GL.getListProcStatuSelection());
         ListEntry tmpListEntry =  listModel.get(GL.getListProcStatuSelection());
        //
        if (tmpListEntry.status.equals("Running") || tmpListEntry.status.equals("Finished")){
             OutputText.setEnabled(true);
            String text="";
            try{
                File file = new File( tmpListEntry.path+"/Routput.Rout");
                BufferedReader reader = new BufferedReader(new FileReader(file));
                String strLine;
                //Read File Line By Line
                while ((strLine = reader.readLine()) != null)   {
                    text+="\n"+strLine;
                }
                reader.close();    
            }
            catch (Exception e){//Catch exception if any
                System.err.println("Error: " + e.getMessage());
                JOptionPane.showMessageDialog(this, "Error reading file","Error",JOptionPane.ERROR_MESSAGE);
            }
            OutputText.setText(text);
        }
        ReloadOutput.setSelected(false);
    }//GEN-LAST:event_ReloadOutputActionPerformed

    
    private void RemoveOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveOutputActionPerformed
        // TODO add your handling code here:
        int pos=GL.getListProcStatuSelection();
        //System.out.println("Pos:"+pos+"\n");
        int tmpPos=-1;
        for(int i=0;i<listProcRunning.size();i++){
           
            if (listProcRunning.get(i).pos>pos){
                listProcRunning.get(i).pos--;
            }
            else
                if (listProcRunning.get(i).pos==pos){
                    tmpPos=i;
                }
        }
        if (tmpPos!=-1){
            //try{
            //if Docker is runnning
            String[] cmd = {"/bin/bash","-c"," "};
            try{
                    File file = new File(listProcRunning.get(tmpPos).path+"/dockerID");
                    BufferedReader reader = new BufferedReader(new FileReader(file));
                    String dockerID = reader.readLine();
                    cmd[2]="docker kill " +dockerID +" ; rm " + listProcRunning.get(tmpPos).path+"/dockerID"; 
                    Runtime.getRuntime().exec(cmd);
                    reader.close();    
                }
            catch (IOException e){//Catch exception if any
                System.out.println("No docker running \n");
                } 
            long pID=getPidOfProcess(listProcRunning.get(tmpPos).pr);
            //System.out.println("lanciato PID:"+pID +"\n");  
            if (pID!=-1){
                try{
                   cmd[2]="kill $(./list_descendants.sh " +Long.toString(pID)+")"; 
                   Runtime.getRuntime().exec(cmd);
                }
                catch(IOException e){
                    System.err.println("Error in Killing the process children:" + e);
                }
                
            }
            try{
                    File file = new File(listProcRunning.get(tmpPos).path+"/tempFolderID");
                    BufferedReader reader = new BufferedReader(new FileReader(file));
                    String tempFolderID = reader.readLine();
                    if (!(tempFolderID.equals(""))){
                        cmd[2]="rm -R " + tempFolderID +" ; rm " + listProcRunning.get(tmpPos).path+"/tempFolderID"; 
                        Runtime.getRuntime().exec(cmd);
                    }
                    reader.close();    
                }    
            catch (IOException e){//Catch exception if any
                System.out.println("No temporary folder\n");
                } 
            //listProcRunning.get(tmpPos).pr.destroy();
           // listProcRunning.get(tmpPos).pr.waitFor();
            //}
            //catch (InterruptedException e) {
           // System.err.println("Error in Killing the process:" + e);
            //}
            /*Field field;
            try{
            final Runtime runtime = Runtime.getRuntime();
            field=listProcRunning.get(tmpPos).pr.getClass().getField("pid");
            field.setAccessible(true);
            final Object processID = field.get(listProcRunning.get(tmpPos).pr);
            final int pid = (Integer) processID;
            runtime.exec("sudo kill -9 " + pid);
            }
            catch (IOException e) {
                   System.err.println("Error in Killing the process:" + e);
                } catch (SecurityException e) {
                    System.err.println("Error in Killing the process:" + e);
                } catch (NoSuchFieldException e) {
                    System.err.println("Error in Killing the process:" + e);
                } catch (IllegalArgumentException e) {
                     System.err.println("Error in Killing the process:" + e);
                } catch (IllegalAccessException e) {
                     System.err.println("Error in Killing the process:" + e);
                }
            */
            listProcRunning.remove(tmpPos);
            tmpPos=-1;
        }
        
        for(int i=0;i<listProcWaiting.size();i++){
            if (listProcWaiting.get(i).pos>pos){
                listProcWaiting.get(i).pos--;    
            }
            else
                if (listProcWaiting.get(i).pos==pos){
                    tmpPos=i;
                } 
        }
         if (tmpPos!=-1){
            listProcWaiting.remove(tmpPos);
            tmpPos=-1;
        }
        //System.out.println("Pos1:"+pos+"\n");
        GL.setListProcStatuSelection(-1);
        listModel.remove(pos);
        //System.out.println("Pos2:"+pos+"\n");
        OutputFrame.setVisible(false);
        OutputText.setText("");
        GL.setAvoidProcListValueChanged(-1);
        ProcList.clearSelection();
        GL.setAvoidProcListValueChanged(0);
    }//GEN-LAST:event_RemoveOutputActionPerformed

    private void toolbar_settingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolbar_settingsActionPerformed
        // configurationMenuItemActionPerformed(evt);
    }//GEN-LAST:event_toolbar_settingsActionPerformed

    private void ConfCancellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfCancellActionPerformed
        ConfigurationFrame.setVisible(false);
    }//GEN-LAST:event_ConfCancellActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
       
        GS.setMaxSizelistProcRunning(Integer.valueOf(ParallelTextField.getText()));
        GS.setDefaultAdapter5(Adapter5TextField.getText());
        GS.setDefaultAdapter3(Adapter3TextField.getText());
        GS.setDefaultThread(Integer.valueOf(ThreadTextField.getText()));
        GS.save();
        ConfigurationFrame.setVisible(false);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

        ParallelTextField.setText(Integer.toString(GS.getMaxSizelistProcRunning()));
        ThreadTextField.setText(Integer.toString(GS.getDefaultThread()));
        Adapter5TextField.setText(GS.getDefaultAdapter5());
        Adapter3TextField.setText(GS.getDefaultAdapter3());
        
    }//GEN-LAST:event_jButton11ActionPerformed

    private void toolbar_rmdockerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolbar_rmdockerActionPerformed
       removeDockerContainer(evt);
    }//GEN-LAST:event_toolbar_rmdockerActionPerformed

    private void menu_edit_configureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_edit_configureActionPerformed
      // configurationMenuItemActionPerformed(evt);
    }//GEN-LAST:event_menu_edit_configureActionPerformed

    private void menu_edit_rmdockerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_edit_rmdockerActionPerformed
       removeDockerContainer(evt);
    }//GEN-LAST:event_menu_edit_rmdockerActionPerformed

    private void menu_file_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_file_exitActionPerformed
       System.exit(0);
    }//GEN-LAST:event_menu_file_exitActionPerformed

    private void menu_file_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_file_saveActionPerformed
        String executionstate = "";
            
            if (ch_execution_c.isSelected() && ch_execution_s.isSelected()){            
                executionstate += "f";
            }
            else if (ch_execution_c.isSelected()) {
                executionstate += "c";
            }
            else if (ch_execution_s.isSelected()) {
                executionstate += "s";
            }

        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            FileOutputStream stream = null;
            PrintStream out = null;
            try {
                File file = chooser.getSelectedFile();
                stream = new FileOutputStream(file); 
                String text = "vcircrna_list:" + vcircrna_list.getText() + "\n"
                        + "vexon_export:" + vexon_export.getText() + "\n"
                        + "ch_voutput_folder:" + ch_voutput_folder.getText() + "\n"
                        + "genome_selection:" + genome_selection.getSelectedIndex() +"\n"
                        + "execution_state:" + executionstate + "\n"
                        + "vbacksplicing_junction:" + vbacksplicing_junction.getText() + "\n"
                        + "vsupplied_rnaseq:" + vsupplied_rnaseq.getText() + "\n"
                        + "hc_vkmer_size:" + hc_vkmer_size.getText() + "\n"
                        + "hc_vthread:" + hc_vthread.getText() + "\n"
                        + "hc_vhash_size:" + hc_vhash_size.getText() + "\n"
                        + "hc_vcollision_list_size:" + hc_vcollision_list_size.getText() + "\n"
                        + "hc_vnum_kmer:" + hc_vnum_kmer.getText() + "\n"
                        + "hc_vmatches:" + hc_vmatches.getText() + "\n"
                        + "hc_voutput_folder:" + hc_voutput_folder.getText() + "\n";
                out = new PrintStream(stream);
                out.print(text);                  //This will overwrite existing contents

            } catch (Exception ex) {
                //do something
            } finally {
                try {
                    if(stream!=null) stream.close();
                    if(out!=null) out.close();
                } catch (Exception ex) {
                    //do something
                }
            }
        }   
    }//GEN-LAST:event_menu_file_saveActionPerformed

    private void menu_file_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_file_openActionPerformed
        JFileChooser openFile = new JFileChooser();
        
        if (openFile.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            try{
                String line;
                File f = openFile.getSelectedFile();
                FileReader fw = new FileReader(f.getAbsoluteFile());
                BufferedReader br = new BufferedReader(fw);
                
//                int line=0;
//                for (String x = br.readLine(); x != null; x = br.readLine()){
//                    //String[] saved_data = x.split(":");
//                    switch (line){
//                        case 0:
//                            vcircrna_list.setText(x);
//                    }
//                }

                while ((line = br.readLine()) != null) {
                    // Deal with the line
                    String[] content = line.split(":");
                                        
                    if (content[0].equals("vcircrna_list")){
                        vcircrna_list.setText(content[1]);    
                    } else if (content[0].equals("vexon_export")){
                        vexon_export.setText(content[1]);
                    } else if (content[0].equals("ch_voutput_folder")){
                        ch_voutput_folder.setText(content[1]);
                    } else if (content[0].equals("vbacksplicing_junction")){
                        vbacksplicing_junction.setText(content[1]);
                    } else if (content[0].equals("vsupplied_rnaseq")){
                        vsupplied_rnaseq.setText(content[1]);
                    } else if (content[0].equals("hc_vkmer_size")){
                        hc_vkmer_size.setText(content[1]);
                    } else if (content[0].equals("hc_vthread")){
                        hc_vthread.setText(content[1]);
                    } else if (content[0].equals("hc_vhash_size")){
                        hc_vhash_size.setText(content[1]);
                    } else if (content[0].equals("hc_vcollision_list_size")){
                        hc_vcollision_list_size.setText(content[1]);
                    } else if (content[0].equals("hc_vnum_kmer")){
                        hc_vnum_kmer.setText(content[1]);
                    } else if (content[0].equals("hc_vmatches")){
                        hc_vmatches.setText(content[1]);
                    } else if (content[0].equals("hc_voutput_folder")){
                        hc_voutput_folder.setText(content[1]);
                    } else if (content[0].equals("execution_state")){
                        if (content[1].equals("c") || content[1].equals("f")){
                            ch_execution_c.setSelected(rootPaneCheckingEnabled);
                        }
                        if (content[1].equals("s") || content[1].equals("f")){
                            ch_execution_s.setSelected(rootPaneCheckingEnabled);
                        }
                    } else if (content[0].equals("genome_selection")){
                        Integer gi = Integer.parseInt(content[1]);
                        genome_selection.setSelectedIndex(gi);
                    
                    }

                    }
                }


            catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error opening file","Error",JOptionPane.ERROR_MESSAGE);
                }
            }

    }//GEN-LAST:event_menu_file_openActionPerformed

    private void genome_selectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genome_selectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genome_selectionActionPerformed

    private void bexon_export_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bexon_export_cancelActionPerformed
        // TODO add your handling code here:
        vexon_export.setText("");
    }//GEN-LAST:event_bexon_export_cancelActionPerformed

    private void bexon_export_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bexon_export_browseActionPerformed
        // TODO add your handling code here:
        JFileChooser openDir = new JFileChooser();
        if (!(vexon_export.getText().equals(""))){
            File file =new File(vexon_export.getText());
            file=new File(file.getAbsolutePath());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        openDir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            vexon_export.setText(String.valueOf(f));
        }
    }//GEN-LAST:event_bexon_export_browseActionPerformed

    private void bcircrna_list_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcircrna_list_cancelActionPerformed
        vcircrna_list.setText("");
    }//GEN-LAST:event_bcircrna_list_cancelActionPerformed

    private void bcircrna_list_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcircrna_list_browseActionPerformed
        JFileChooser openDir = new JFileChooser();
        if (!(vcircrna_list.getText().equals(""))){
            File file =new File(vcircrna_list.getText());
            file=new File(file.getAbsolutePath());
            file=new File(file.getAbsolutePath());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        openDir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            vcircrna_list.setText(String.valueOf(f));
        }
    }//GEN-LAST:event_bcircrna_list_browseActionPerformed

    private void vcircrna_listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vcircrna_listActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vcircrna_listActionPerformed

    private void button_saveconf_chActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_saveconf_chActionPerformed
//        saveAsMenuItemActionPerformed(evt); 
            
            String executionstate = "";
            
            if (ch_execution_c.isSelected() && ch_execution_s.isSelected()){            
                executionstate += "f";
            }
            else if (ch_execution_c.isSelected()) {
                executionstate += "c";
            }
            else if (ch_execution_s.isSelected()) {
                executionstate += "s";
            }

        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            FileOutputStream stream = null;
            PrintStream out = null;
            try {
                File file = chooser.getSelectedFile();
                stream = new FileOutputStream(file); 
                String text = "vcircrna_list:" + vcircrna_list.getText() + "\n"
                        + "vexon_export:" + vexon_export.getText() + "\n"
                        + "ch_voutput_folder:" + ch_voutput_folder.getText() + "\n"
                        + "genome_selection:" + genome_selection.getSelectedIndex() +"\n"
                        + "execution_state:" + executionstate + "\n";
                out = new PrintStream(stream);
                out.print(text);                  //This will overwrite existing contents

            } catch (Exception ex) {
                //do something
            } finally {
                try {
                    if(stream!=null) stream.close();
                    if(out!=null) out.close();
                } catch (Exception ex) {
                    //do something
                }
            }
        }
    }//GEN-LAST:event_button_saveconf_chActionPerformed

    private void button_reset_chActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_reset_chActionPerformed

        // vDockerRadioButton.setSelected(true);
        vcircrna_list.setText("");
        vexon_export.setText("");
        ch_voutput_folder.setText("");
        genome_selection.setSelectedIndex(1);
        ch_execution_c.setSelected(false);
        ch_execution_s.setSelected(false);
        //vPeRadioButton.setSelected(true);
        //vTnoRadioButton.setSelected(true);
        //vBAMnoLRadioButton.setSelected(true);
    }//GEN-LAST:event_button_reset_chActionPerformed

    private void button_execute_chActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_execute_chActionPerformed
        
        //Mandatory fields check
        if (vcircrna_list.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specify a circRNA file to use as input","Error: circRNA file missing",JOptionPane.ERROR_MESSAGE);
            vcircrna_list.requestFocusInWindow();
            return;
        }
        else if (ch_execution_c.isSelected() == false && ch_execution_s.isSelected() == false){
            JOptionPane.showMessageDialog(this, "You have to specify a job","Error: job missing",JOptionPane.ERROR_MESSAGE);
            ch_execution_c.requestFocusInWindow();
            return;    
        }
        
        try{
            // Building launch string
            
            // Initializing string
            //String[] cmd = {"/bin/bash","-c", "cd ../CircHunter; ./circhunter.sh"};
            String[] cmd = {"/bin/bash","-c", "CircHunter/circhunter.sh"};
            
            // Checking execution mode (jobs)

            if (ch_execution_c.isSelected() && ch_execution_s.isSelected()){
                cmd[2]+= " -f";
            }
            else if (ch_execution_c.isSelected()) {
                cmd[2] += " -c";
            }
            else if (ch_execution_s.isSelected()) {
                cmd[2] += " -s";
            }

            // CircHunter is running in graphical mode
            cmd[2]+= " -guimode";
            
            // Checking circRNA file
            cmd[2]+= " -cr "+vcircrna_list.getText();
            
            // Checking if genome was provided
            if (vexon_export.getText().isEmpty() == false){
                cmd[2]+= " -sg "+vexon_export.getText();
            }
            
            // Checking selected assembly
            int genomeindex = genome_selection.getSelectedIndex();
            String selectedassembly = "";
            
            switch(genomeindex) {
                case 0: selectedassembly = "hg18";
                break;
                case 1: selectedassembly = "hg19";
                break;
                case 2: selectedassembly = "hg38";
                break;
            }
            
            cmd[2]+= " -as "+selectedassembly+ " >& ./outputScript";
            System.out.println("Command:"+cmd[2]);
            // Debug for output string
            //JOptionPane.showMessageDialog(this, cmd);
            JOptionPane.showMessageDialog(this, "CircHunter workflow task was scheduled","Confermation",JOptionPane.INFORMATION_MESSAGE); 
            //ProcessStatus.setText(pr.toString());
            
            Runtime rt = Runtime.getRuntime();   
            if (listProcRunning.size()<GS.getMaxSizelistProcRunning()){
                Process pr = rt.exec(cmd);
                //System.out.println("lanciato "+pr);
                ElProcRunning tmp= new ElProcRunning("CircHunter workflow ", vcircrna_list.getText(),pr,listModel.getSize());
                listProcRunning.add(tmp);
                java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/running.png");
                ImageIcon image2 = new ImageIcon(imgURL);
                GL.setAvoidProcListValueChanged(-1);
                listModel.addElement(new ListEntry(" [Running]   "+tmp.toString(),"Running",tmp.path, image2 ));
                GL.setAvoidProcListValueChanged(0);
                if(listProcRunning.size()==1){
                    t=new Timer();
                    t.scheduleAtFixedRate(new MyTask(), 5000, 5000);
                }
                
            }
            else{
                ElProcWaiting tmp= new ElProcWaiting("CircHunter workflow ", vcircrna_list.getText(),cmd,listModel.getSize());
                listProcWaiting.add(tmp);
                java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/waiting.png");                        ImageIcon image2 = new ImageIcon(imgURL);
                GL.setAvoidProcListValueChanged(-1);
                listModel.addElement(new ListEntry(" [Waiting]   "+tmp.toString(),"Waiting",tmp.path,image2));                  GL.setAvoidProcListValueChanged(0);

            }
            GL.setAvoidProcListValueChanged(-1);
            ProcList.setModel(listModel);
            ProcList.setCellRenderer(new ListEntryCellRenderer());
            GL.setAvoidProcListValueChanged(0);
            
        }
        catch(Exception e) {
        JOptionPane.showMessageDialog(this, e.toString(),"Error execution",JOptionPane.ERROR_MESSAGE);
        System.out.println(e.toString());
        }
            
            
       
        
        /*
        if (circrna_list.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specified an input folder","Error: FastQ  folder",JOptionPane.ERROR_MESSAGE);
            //vFastQFolderText.requestFocusInWindow();
            return;
        }
        else
        if (vBiomartText.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specified an output folder","Error: Output folder",JOptionPane.ERROR_MESSAGE);
            //vOutputFolderText.requestFocusInWindow();
            return;
        }
        else
        if (vJunctionText.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specified an genome folder","Error: Genome folder",JOptionPane.ERROR_MESSAGE);
            //vGenomeFolderText.requestFocusInWindow();
            return;
        }
        else
        /* if (vThreadText.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specified the number of threads that will be used.","Error: Thread  number",JOptionPane.ERROR_MESSAGE);
            vThreadText.requestFocusInWindow();
            return;
        }
        try
        {
            Integer x = Integer.valueOf(vThreadText.getText());
            if (x<=0){
                JOptionPane.showMessageDialog(this, "You have to specified a value greater than 0.","Error: Thread  number",JOptionPane.ERROR_MESSAGE);
                vThreadText.requestFocusInWindow();
                return;
            }
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "You have to specified the number of threads that will be used.","Error: Thread  number",JOptionPane.ERROR_MESSAGE);
            vThreadText.requestFocusInWindow();
            return;
        }

        if ((!vAdapter5Text.getText().isEmpty())&&(!adapter.matcher(vAdapter5Text.getText()).matches())){
            JOptionPane.showMessageDialog(this, "The specified Adapter format is not valid.","Error: Adapter 5'",JOptionPane.ERROR_MESSAGE);
            vAdapter5Text.requestFocusInWindow();
        }
        else{
            if ((!vAdapter3Text.getText().isEmpty())&&(!adapter.matcher(vAdapter3Text.getText()).matches())){
                JOptionPane.showMessageDialog(this, "The specified Adapter format is not valid.","Error: Adapter 3'",JOptionPane.ERROR_MESSAGE);
                vAdapter3Text.requestFocusInWindow();
            }
            else{
                if (vMinLengthText.getText().isEmpty()){
                    JOptionPane.showMessageDialog(this, "You have to specified a value for the minimum lenght.","Error: Minimum read length",JOptionPane.ERROR_MESSAGE);
                    vMinLengthText.requestFocusInWindow();
                    return;
                }
                try{
                    Integer x = Integer.valueOf(vMinLengthText.getText());
                    if (x<0){
                        JOptionPane.showMessageDialog(this, "You have to specified a positive value.","Error: Minimum read length",JOptionPane.ERROR_MESSAGE);
                        vMinLengthText.requestFocusInWindow();
                        return;
                    }
                }
                catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "You have to specified a positive value.","Error: Minimum read length",JOptionPane.ERROR_MESSAGE);
                    vMinLengthText.requestFocusInWindow();
                    return;
                }
                if (!org.matcher(vOrganismText.getText()).matches()){
                    JOptionPane.showMessageDialog(this, "The specified organism is not valid.","Error: Organism",JOptionPane.ERROR_MESSAGE);
                    vOrganismText.requestFocusInWindow();
                }
                else{
                    //execute code
                    Runtime rt = Runtime.getRuntime();
                    try{
                        String[] cmd = {"/bin/bash","-c"," ./execRNA.sh "};

                        /*if (vSudoRadioButton.isSelected()){
                            cmd[2]+= "group=\\\"sudo\\\"";
                        }
                        else{
                            cmd[2]+= "group=\\\"docker\\\"";
                        }

                        cmd[2]+= " fastq.folder=\\\""+vCirRNAText.getText()+"\\\" scratch.folder=\\\""+vBiomartText.getText()+"\\\" adapter5=\\\""+vAdapter5Text.getText()+"\\\" adapter3=\\\""+vAdapter3Text.getText()+"\\\"";

                        if (vPeRadioButton.isSelected()){
                            cmd[2]+= " seq.type=\\\"pe\\\"";
                        }
                        else{
                            cmd[2]+= " seq.type=\\\"se\\\"";;
                        }
                        //cmd[2]+=  min.length="+vMinLengthText.getText()+" genome.folder=\\\""+vJunctionText.getText()+"\\\"";

                        if (vSNoneRadioButton.isSelected())
                        cmd[2]+= " strandness=\\\"none\\\"";
                        else
                        if (vSForwardRadioButton.isSelected())
                        cmd[2]+= " strandness=\\\"forward\\\"";
                        else
                        cmd[2]+= " strandness=\\\"reverse\\\"";
                        if (vTyesRadioButton.isSelected())
                        cmd[2]+= " truncating.expected.counts=TRUE";
                        else
                        cmd[2]+= " truncating.expected.counts=FALSE";

                        cmd[2]+= " annotation.type=\\\"gtfENSEMBL\\\"";

                        if (vBAMyesRadioButton.isSelected())
                        cmd[2]+= " save.bam=TRUE";
                        else
                        cmd[2]+= " save.bam=FALSE";

                        cmd[2]+=" "+vCirRNAText.getText() +" >& "+vCirRNAText.getText()+"/outputExecution ";

                        //ProcessStatus.setText(pr.toString());
                        if (listProcRunning.size()<GS.getMaxSizelistProcRunning()){
                            Process pr = rt.exec(cmd);
                            //System.out.println("lanciato "+pr);
                            ElProcRunning tmp= new ElProcRunning("RNAseq counting workflow", vCirRNAText.getText(),pr,listModel.getSize());
                            listProcRunning.add(tmp);
                            java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/running.png");
                            ImageIcon image2 = new ImageIcon(imgURL);
                            GL.setAvoidProcListValueChanged(-1);
                            listModel.addElement(new ListEntry(" [Running]   "+tmp.toString(),"Running",tmp.path, image2 ));
                            GL.setAvoidProcListValueChanged(0);
                            //addElement("RNAseq counting workflow (data input: "+vFastQFolderText.getText()+")            [Runnig]");
                            if(listProcRunning.size()==1){
                                t=new Timer();
                                t.scheduleAtFixedRate(new MyTask(), 5000, 5000);
                            }
                        }

                        else{
                            ElProcWaiting tmp= new ElProcWaiting("RNAseq counting workflow",vCirRNAText.getText(),cmd,listModel.getSize());
                            listProcWaiting.add(tmp);
                            java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/waiting.png");
                            ImageIcon image2 = new ImageIcon(imgURL);
                            GL.setAvoidProcListValueChanged(-1);
                            listModel.addElement(new ListEntry(" [Waiting]   "+tmp.toString(),"Waiting",tmp.path,image2));
                            GL.setAvoidProcListValueChanged(0);

                        }
                        GL.setAvoidProcListValueChanged(-1);
                        ProcList.setModel(listModel);
                        ProcList.setCellRenderer(new ListEntryCellRenderer());
                        GL.setAvoidProcListValueChanged(0);
                    }
                    catch(Exception e) {
                        JOptionPane.showMessageDialog(this, e.toString(),"Error execution",JOptionPane.ERROR_MESSAGE);
                        System.out.println(e.toString());
                    }
                    JOptionPane.showMessageDialog(this, " RNAseq counting workflow was scheduled","Confermation",JOptionPane.INFORMATION_MESSAGE);
                }
                //execute code
            }
        }
        */
    }//GEN-LAST:event_button_execute_chActionPerformed

    private void button_close_chActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_close_chActionPerformed

        //RESET FIELDS
        vcircrna_list.setText("");
        vexon_export.setText("");
        genome_selection.setSelectedIndex(1);
        ch_execution_c.setSelected(false);
        ch_execution_s.setSelected(false);

        //RESET FIELDS
        CardLayout card = (CardLayout)analysis_panel.getLayout();
        card.show(analysis_panel, "Empty");
        CurrentLayout="Empty";
        //GL.setAvoidProcListValueChanged(-1);
        AnalysisTree.clearSelection();
    }//GEN-LAST:event_button_close_chActionPerformed

    private void AnalysisTreeTreeExpanded(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_AnalysisTreeTreeExpanded
        // TODO add your handling code here:
    }//GEN-LAST:event_AnalysisTreeTreeExpanded

    private void button_close_hcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_close_hcActionPerformed
        //RESET FIELDS
        CardLayout card = (CardLayout)analysis_panel.getLayout();
        card.show(analysis_panel, "Empty");
        CurrentLayout="Empty";
        //GL.setAvoidProcListValueChanged(-1);
        AnalysisTree.clearSelection();
    }//GEN-LAST:event_button_close_hcActionPerformed

    private void button_execute_hcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_execute_hcActionPerformed
        //Mandatory fields check
        if (vbacksplicing_junction.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specify a backsplicing junction file to use as input","Error: backsplicing junction file missing",JOptionPane.ERROR_MESSAGE);
            vbacksplicing_junction.requestFocusInWindow();
            return;
        }
        
        else if (vsupplied_rnaseq.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specify a RNA-Seq file to use as input","Error: RNA-Seq file missing",JOptionPane.ERROR_MESSAGE);
            vsupplied_rnaseq.requestFocusInWindow();
            return;
        }
        
        else if (hc_vkmer_size.getText().isEmpty()
                || hc_vthread.getText().isEmpty()
                || hc_vhash_size.getText().isEmpty()
                || hc_vcollision_list_size.getText().isEmpty()
                || hc_vnum_kmer.getText().isEmpty()
                || hc_vmatches.getText().isEmpty()){
            
            JOptionPane.showMessageDialog(this, "You have to specify all the arguments for HashCirc.","Error: HashCirc arguments missing",JOptionPane.ERROR_MESSAGE);
            hc_vthread.requestFocusInWindow();
            return;    
        }
        
        else {
            // Building launch string
            
            // Initializing string
            //String[] cmd = {"/bin/bash ", "circhunter.sh"};
            String[] cmd = {"/bin/bash","-c", "CircHunter/circhunter.sh -r -guimode"};
            
            // Checking backsplicing junction file
            cmd[2]+= " -bj "+vbacksplicing_junction.getText();
            
            // Checking RNA-seq file
            cmd[2]+= " -rs "+vsupplied_rnaseq.getText();
            
            // Checking hashcirc arguments
            cmd[2]+= " -hc "+hc_vkmer_size.getText()
                    +" "+hc_vthread.getText()
                    +" "+hc_vhash_size.getText()
                    +" "+hc_vcollision_list_size.getText()
                    +" "+hc_vnum_kmer.getText()
                    +" "+hc_vmatches.getText();
            
            // Checking if output folder was provided
            if (!hc_voutput_folder.getText().equals("") ) {
                
                cmd[2] += " -of "+hc_voutput_folder.getText();
            
            }
            
            // Defining log file
            cmd[2] += " >& ./outputScript";
            
            // Debug for output string
            JOptionPane.showMessageDialog(this, "HashCirc workflow task was scheduled","Confermation",JOptionPane.INFORMATION_MESSAGE); 
            
            try{
            Runtime rt = Runtime.getRuntime();   
            if (listProcRunning.size()<GS.getMaxSizelistProcRunning()){
                Process pr = rt.exec(cmd);
                //System.out.println("lanciato "+pr);
                ElProcRunning tmp= new ElProcRunning("HashCirc workflow ", vbacksplicing_junction.getText(),pr,listModel.getSize());
                listProcRunning.add(tmp);
                java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/running.png");
                ImageIcon image2 = new ImageIcon(imgURL);
                GL.setAvoidProcListValueChanged(-1);
                listModel.addElement(new ListEntry(" [Running]   "+tmp.toString(),"Running",tmp.path, image2 ));
                GL.setAvoidProcListValueChanged(0);
                if(listProcRunning.size()==1){
                    t=new Timer();
                    t.scheduleAtFixedRate(new MyTask(), 5000, 5000);
                }
                
            }
            else{
                ElProcWaiting tmp= new ElProcWaiting("HashCirc workflow ", vbacksplicing_junction.getText(),cmd,listModel.getSize());
                listProcWaiting.add(tmp);
                java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/waiting.png");                        ImageIcon image2 = new ImageIcon(imgURL);
                GL.setAvoidProcListValueChanged(-1);
                listModel.addElement(new ListEntry(" [Waiting]   "+tmp.toString(),"Waiting",tmp.path,image2));                  GL.setAvoidProcListValueChanged(0);

            }
            GL.setAvoidProcListValueChanged(-1);
            ProcList.setModel(listModel);
            ProcList.setCellRenderer(new ListEntryCellRenderer());
            GL.setAvoidProcListValueChanged(0);
            
        }
        catch(Exception e) {
        JOptionPane.showMessageDialog(this, e.toString(),"Error execution",JOptionPane.ERROR_MESSAGE);
        System.out.println(e.toString());
        }
      }
    }//GEN-LAST:event_button_execute_hcActionPerformed

    private void button_reset_hcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_reset_hcActionPerformed
        vbacksplicing_junction.setText("");
        vsupplied_rnaseq.setText("");
        hc_vkmer_size.setText("");
        hc_vthread.setText("");
        hc_vhash_size.setText("");
        hc_vcollision_list_size.setText("");
        hc_vnum_kmer.setText("");
        hc_vmatches.setText("");
        hc_voutput_folder.setText("");
    }//GEN-LAST:event_button_reset_hcActionPerformed

    private void button_saveconf_hcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_saveconf_hcActionPerformed
        //saveAsMenuItemActionPerformed(evt);
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            FileOutputStream stream = null;
            PrintStream out = null;
            try {
                File file = chooser.getSelectedFile();
                stream = new FileOutputStream(file); 
                String text = "vbacksplicing_junction:" + vbacksplicing_junction.getText() + "\n"
                        + "vsupplied_rnaseq:" + vsupplied_rnaseq.getText() + "\n"
                        + "hc_vkmer_size:" + hc_vkmer_size.getText() + "\n"
                        + "hc_vthread:" + hc_vthread.getText() + "\n"
                        + "hc_vhash_size:" + hc_vhash_size.getText() + "\n"
                        + "hc_vcollision_list_size:" + hc_vcollision_list_size.getText() + "\n"
                        + "hc_vnum_kmer:" + hc_vnum_kmer.getText() + "\n"
                        + "hc_vmatches:" + hc_vmatches.getText() + "\n"
                        + "hc_voutput_folder:" + hc_voutput_folder.getText() + "\n";
                out = new PrintStream(stream);
                out.print(text);                  //This will overwrite existing contents

            } catch (Exception ex) {
                //do something
            } finally {
                try {
                    if(stream!=null) stream.close();
                    if(out!=null) out.close();
                } catch (Exception ex) {
                    //do something
                }
            }
        }
    }//GEN-LAST:event_button_saveconf_hcActionPerformed

    private void bbacksplicing_junction_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bbacksplicing_junction_browseActionPerformed
        JFileChooser openDir = new JFileChooser();
        if (!(vbacksplicing_junction.getText().equals(""))){
            File file =new File(vbacksplicing_junction.getText());
            file=new File(file.getAbsolutePath());
            file=new File(file.getAbsolutePath());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        openDir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            vbacksplicing_junction.setText(String.valueOf(f));
        }
    }//GEN-LAST:event_bbacksplicing_junction_browseActionPerformed

    private void bbacksplicing_junction_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bbacksplicing_junction_cancelActionPerformed
        vbacksplicing_junction.setText("");
    }//GEN-LAST:event_bbacksplicing_junction_cancelActionPerformed

    private void bsupplied_rnaseq_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bsupplied_rnaseq_browseActionPerformed
        JFileChooser openDir = new JFileChooser();
        if (!(vsupplied_rnaseq.getText().equals(""))){
            File file =new File(vsupplied_rnaseq.getText());
            file=new File(file.getAbsolutePath());
            file=new File(file.getAbsolutePath());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        openDir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            vsupplied_rnaseq.setText(String.valueOf(f));
        }
    }//GEN-LAST:event_bsupplied_rnaseq_browseActionPerformed

    private void bsupplied_rnaseq_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bsupplied_rnaseq_cancelActionPerformed
        vsupplied_rnaseq.setText("");
    }//GEN-LAST:event_bsupplied_rnaseq_cancelActionPerformed

    private void hc_vkmer_sizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hc_vkmer_sizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hc_vkmer_sizeActionPerformed

    private void vsupplied_rnaseqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vsupplied_rnaseqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vsupplied_rnaseqActionPerformed

    private void vbacksplicing_junctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vbacksplicing_junctionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vbacksplicing_junctionActionPerformed

    private void hc_vthreadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hc_vthreadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hc_vthreadActionPerformed

    private void hc_vhash_sizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hc_vhash_sizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hc_vhash_sizeActionPerformed

    private void hc_vnum_kmerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hc_vnum_kmerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hc_vnum_kmerActionPerformed

    private void hc_vmatchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hc_vmatchesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hc_vmatchesActionPerformed

    private void vexon_exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vexon_exportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vexon_exportActionPerformed

    private void hc_voutput_folderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hc_voutput_folderActionPerformed
        // TODO add your handling code here:    
    }//GEN-LAST:event_hc_voutput_folderActionPerformed

    private void button_outputbrowse_hcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_outputbrowse_hcActionPerformed
        JFileChooser openDir = new JFileChooser();
        if (!(hc_voutput_folder.getText().equals(""))){
            File file =new File(hc_voutput_folder.getText());
            file=new File(file.getAbsolutePath());
            file=new File(file.getAbsolutePath());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            hc_voutput_folder.setText(String.valueOf(f));
        }
    }//GEN-LAST:event_button_outputbrowse_hcActionPerformed

    private void button_outputcancel_hcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_outputcancel_hcActionPerformed
        hc_voutput_folder.setText("");
    }//GEN-LAST:event_button_outputcancel_hcActionPerformed

    private void ch_voutput_folderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ch_voutput_folderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ch_voutput_folderActionPerformed

    private void button_outputbrowse_chActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_outputbrowse_chActionPerformed
        JFileChooser openDir = new JFileChooser();
        if (!(ch_voutput_folder.getText().equals(""))){
            File file =new File(ch_voutput_folder.getText());
            file=new File(file.getAbsolutePath());
            file=new File(file.getAbsolutePath());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            ch_voutput_folder.setText(String.valueOf(f));
        }
    }//GEN-LAST:event_button_outputbrowse_chActionPerformed

    private void button_outputcancel_chActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_outputcancel_chActionPerformed
        ch_voutput_folder.setText("");
    }//GEN-LAST:event_button_outputcancel_chActionPerformed

    private void ch_execution_cActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ch_execution_cActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ch_execution_cActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
       
//Saving Window size preference        
       getPreferences().put("CircHunterGUI_WindowWidth", Integer.toString(getSize().width));
       getPreferences().put("CircHunterGUI_WindowHeight",Integer.toString(getSize().height));
//Saving Window size preference
//Saving split panel preferences
       getPreferences().put("CircHunterGUI_HorizontalSplitPanel", Integer.toString(HorizontalSplitPanel.getDividerLocation()));
       getPreferences().put("CircHunterGUI_VerticalSplitPanel", Integer.toString(VerticalSplitPanel.getDividerLocation()));
 //Saving split panel preferences      
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       AboutCirHunter.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        ShowAboutCirHunter(evt);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ShowAboutCirHunter(evt);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void  ShowAboutCirHunter(java.awt.event.ActionEvent evt){
        AboutCirHunter.pack(); 
        AboutCirHunter.setLocationRelativeTo(null);                                       
        AboutCirHunter.setVisible(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
         //Anti-aliasing code
        System.setProperty("awt.useSystemAAFontSettings","on");
        System.setProperty("swing.aatext", "true");
         //Anti-aliasing code
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("plafto".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
           javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());     
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
  
        
        try{
        Thread.sleep(3000L);
        }
        catch ( Exception e ) { } 
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame AboutCirHunter;
    private javax.swing.JTextField Adapter3TextField;
    private javax.swing.JTextField Adapter5TextField;
    private javax.swing.JTree AnalysisTree;
    private javax.swing.ButtonGroup Annotation;
    private javax.swing.JPanel BottomPanel;
    private javax.swing.JToggleButton CloseOutput;
    private javax.swing.JButton ConfCancell;
    private javax.swing.JFrame ConfigurationFrame;
    private javax.swing.JPanel EmptyPanel;
    private javax.swing.JSplitPane HorizontalSplitPanel;
    private javax.swing.ButtonGroup IExecution;
    private javax.swing.JPanel LeftPanel;
    private javax.swing.JFrame OutputFrame;
    private javax.swing.JTextArea OutputText;
    private javax.swing.JTextField ParallelTextField;
    private javax.swing.JList<ListEntry> ProcList;
    private javax.swing.JPanel ProcStatusPanel;
    private javax.swing.JToggleButton ReloadOutput;
    private javax.swing.JButton RemoveOutput;
    private javax.swing.ButtonGroup Strand;
    private javax.swing.JTextField ThreadTextField;
    private javax.swing.ButtonGroup Truncating;
    private javax.swing.JSplitPane VerticalSplitPanel;
    private javax.swing.JPanel analysis_panel;
    private javax.swing.JLabel backsplicing_junction;
    private javax.swing.JToggleButton bbacksplicing_junction_browse;
    private javax.swing.JToggleButton bbacksplicing_junction_cancel;
    private javax.swing.JToggleButton bcircrna_list_browse;
    private javax.swing.JToggleButton bcircrna_list_cancel;
    private javax.swing.JToggleButton bexon_export_browse;
    private javax.swing.JToggleButton bexon_export_cancel;
    private javax.swing.JLabel biomart_note;
    private javax.swing.JToggleButton bsupplied_rnaseq_browse;
    private javax.swing.JToggleButton bsupplied_rnaseq_cancel;
    private javax.swing.JButton button_close_ch;
    private javax.swing.JButton button_close_hc;
    private javax.swing.JButton button_execute_ch;
    private javax.swing.JButton button_execute_hc;
    private javax.swing.JButton button_outputbrowse_ch;
    private javax.swing.JButton button_outputbrowse_hc;
    private javax.swing.JButton button_outputcancel_ch;
    private javax.swing.JButton button_outputcancel_hc;
    private javax.swing.JButton button_reset_ch;
    private javax.swing.JButton button_reset_hc;
    private javax.swing.JButton button_saveconf_ch;
    private javax.swing.JButton button_saveconf_hc;
    private javax.swing.JScrollPane ch_analysis_panel;
    private javax.swing.JPanel ch_analysis_panel_files;
    private javax.swing.JPanel ch_analysis_panel_genome;
    private javax.swing.JPanel ch_execution;
    private javax.swing.JCheckBox ch_execution_c;
    private javax.swing.JLabel ch_execution_mode;
    private javax.swing.JCheckBox ch_execution_s;
    private javax.swing.JPanel ch_output_folder;
    private javax.swing.JTextField ch_voutput_folder;
    private javax.swing.JLabel circrna_list;
    private javax.swing.JPanel command_panel_ch;
    private javax.swing.JPanel command_panel_hc;
    private javax.swing.JLabel exon_export;
    private javax.swing.JLabel genome;
    private javax.swing.JLabel genome_note;
    private javax.swing.JComboBox<String> genome_selection;
    private javax.swing.JLabel gui_logo;
    private javax.swing.JPanel hc;
    private javax.swing.JScrollPane hc_analysis_panel;
    private javax.swing.JPanel hc_analysis_panel_files;
    private javax.swing.JLabel hc_collision_list_size;
    private javax.swing.JLabel hc_hash_size;
    private javax.swing.JLabel hc_kmer_size;
    private javax.swing.JLabel hc_matches;
    private javax.swing.JLabel hc_num_kmer;
    private javax.swing.JPanel hc_output_folder;
    private javax.swing.JLabel hc_thread;
    private javax.swing.JTextField hc_vcollision_list_size;
    private javax.swing.JTextField hc_vhash_size;
    private javax.swing.JTextField hc_vkmer_size;
    private javax.swing.JTextField hc_vmatches;
    private javax.swing.JTextField hc_vnum_kmer;
    private javax.swing.JTextField hc_voutput_folder;
    private javax.swing.JTextField hc_vthread;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane logo_panel;
    private javax.swing.ButtonGroup mDownload;
    private javax.swing.ButtonGroup mExecution;
    private javax.swing.ButtonGroup mTrimmed;
    private javax.swing.JMenuBar menu_bar;
    private javax.swing.JMenu menu_edit;
    private javax.swing.JMenuItem menu_edit_configure;
    private javax.swing.JMenuItem menu_edit_rmdocker;
    private javax.swing.JMenu menu_file;
    private javax.swing.JMenuItem menu_file_exit;
    private javax.swing.JMenuItem menu_file_open;
    private javax.swing.JMenuItem menu_file_save;
    private javax.swing.JLabel output_folder;
    private javax.swing.JLabel output_folder_ch;
    private javax.swing.JLabel supplied_rnaseq;
    private javax.swing.JToolBar toolbar;
    private javax.swing.JButton toolbar_open;
    private javax.swing.JButton toolbar_rmdocker;
    private javax.swing.JButton toolbar_save;
    private javax.swing.JToggleButton toolbar_settings;
    private javax.swing.ButtonGroup vExecution;
    private javax.swing.ButtonGroup vSeq;
    private javax.swing.JTextField vbacksplicing_junction;
    private javax.swing.JTextField vcircrna_list;
    private javax.swing.JTextField vexon_export;
    private javax.swing.JTextField vsupplied_rnaseq;
    // End of variables declaration//GEN-END:variables


        


public class ElProcRunning {
    public String type;
    public String path;
    public Process pr;
    public int  pos;
    //constructor
    public ElProcRunning(String type,String path, Process pr,int i) {
        this.type = type;
        this.path = path;
        this.pr = pr;
        pos=i;
    }
   public String toString() {
      return new String(type+" ( data input: "+path+" )");
   }
}

public class ElProcWaiting {
    public String type;
    public String path;
    public String[] cmd;
    public int  pos;
    //constructor
    public ElProcWaiting(String type, String path, String[] cmd, int i) {
        this.type = type;
        this.path =path;
        this.cmd = cmd;
        pos=i;
    }
    public String toString() {
      return new String(type+" ( data input: "+path+")");
   }
}


class GlobalStatus{
 private int ListProcStatusSelection;
 private int AvoidProcListValueChanged; //-1 avoid  ProcListValueChanged
 public GlobalStatus(){
     ListProcStatusSelection=-1;
     AvoidProcListValueChanged=0;
 }
 
 public int getListProcStatuSelection(){
     return ListProcStatusSelection;
 }
  public void setListProcStatuSelection(int ListProcStatusSelection){
     //System.out.print("Updating..."+ListProcStatusSelection+"\n");
     this.ListProcStatusSelection=ListProcStatusSelection;
 }
 
 public int getAvoidProcListValueChanged(){
     return AvoidProcListValueChanged;
 }
  public void setAvoidProcListValueChanged(int AvoidProcListValueChanged){
     this.AvoidProcListValueChanged=AvoidProcListValueChanged;
 }
}

class ListEntry
{
   private String value;
   private ImageIcon icon;
   private  String status;
   private  String path;
   private static final long serialVersionUID = 57782123311L;
   public ListEntry(String value, String status,String path, ImageIcon icon) {
      this.value = value;
      this.icon = icon;
      this.status=status;
      this.path=path;
   }
  
   public String getValue() {
      return value;
   }
  
   public ImageIcon getIcon() {
      return icon;
   }
   public String getStatus() {
      return status;
   }
  
   public String getPath() {
      return path;
   }
   
   public String toString() {
      return value;
   }
}

class GlobalSetting{
    private int DefaultThread= 8;
    private int MaxSizelistProcRunning=1;
    private String DefaultAdapter5="";
    private String DefaultAdapter3="";
    
    public GlobalSetting(){
    boolean findFile=false;    
    try{
                File file = new File(".4SeqGUI");
                BufferedReader reader = new BufferedReader(new FileReader(file));
                int line=0;
                //Read File Line By Line
                 for (String x = reader.readLine(); x != null; x = reader.readLine()){
                                switch (line){
                                    case 0:
                                        DefaultThread=Integer.valueOf(x);
                                        if (DefaultThread<=0){ 
                                            throw(new NumberFormatException()); 
                                        }
                                    break;
                                    case 1:
                                       MaxSizelistProcRunning=Integer.valueOf(x);
                                        if (MaxSizelistProcRunning<=0){ 
                                            throw(new NumberFormatException()); 
                                        }
                                    break;
                                    case 2:
                                        DefaultAdapter5=x;
                                    break;  
                                    case 3:
                                        DefaultAdapter3=x;
                                    break;
                                    default:
                                        throw(new NumberFormatException()); 
                                }                                
                                line++;
                            }
                reader.close();    
        }
    catch (Exception e){//Catch exception if any
                //System.err.println("Error: " + e.getMessage());
            return;
            }    
    }
    
    public void save(){
        
        try{
            FileWriter fw = new FileWriter(".4SeqGUI");
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(DefaultThread+"\n");
            bw.write(MaxSizelistProcRunning+"\n"); 
            bw.write(DefaultAdapter5+"\n");
            bw.write(DefaultAdapter3+"\n"); 
            bw.close();    
        }
        catch (IOException e) {
            JOptionPane.showMessageDialog(ConfigurationFrame, "Error saving file","Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    int getDefaultThread(){
    return DefaultThread;
    }
    
    String getDefaultAdapter5(){
    return DefaultAdapter5;
    }
    
    String getDefaultAdapter3(){
    return DefaultAdapter3;
    }
    
    int getMaxSizelistProcRunning(){
    return MaxSizelistProcRunning;
    }
    
    
    void  setDefaultThread(int DefaultThread){
    this.DefaultThread=DefaultThread;
    }
    
    void setDefaultAdapter5(String DefaultAdapter5){
    this.DefaultAdapter5=DefaultAdapter5;
    }
    
    void setDefaultAdapter3(String DefaultAdapter3){
    this.DefaultAdapter3=DefaultAdapter3;
    }
    
    void setMaxSizelistProcRunning(int MaxSizelistProcRunning){
    this.MaxSizelistProcRunning=MaxSizelistProcRunning;
    }
}

  
class ListEntryCellRenderer
extends JLabel implements ListCellRenderer<Object> 
{
   private JLabel label;
   private static final long serialVersionUID = 5778212331L;
   public Component getListCellRendererComponent(JList<?> list, Object value,
                                                 int index, boolean isSelected,
                                                 boolean cellHasFocus) {
      ListEntry entry = (ListEntry) value;
  
      setText(value.toString());
      setIcon(entry.getIcon());
   
      if (isSelected) {
         setBackground(list.getSelectionBackground());
         setForeground(list.getSelectionForeground());
      }
      else {
         setBackground(list.getBackground());
         setForeground(list.getForeground());
      }
  
      setEnabled(list.isEnabled());
      setFont(list.getFont());
      setOpaque(true);
  
      return this;
   }
}
    private String CurrentLayout="Empty";
    
/*  public class MyThread extends Thread {

    public void run(){
       while(true){ 
       System.out.println("MyThread running");
       try {
            sleep((2000));
	} 
       catch (InterruptedException e) 
        {
			
        }
    }
    }
  }

  MyThread thread =new MyThread();
  */
  Timer t;

  class MyTask extends TimerTask {
      
        public void run() {

            //System.out.format("Checking running !%n");
            for (int i=0;i<listProcRunning.size();i++){
                if (listProcRunning.get(i).pr.isAlive()){
                    //System.out.format("TRUE\n");
                }                    
                else
                {
                    //System.out.format("False\n");
                    int index=listProcRunning.get(i).pos;
                    java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/end.png");
                    ImageIcon image2 = new ImageIcon(imgURL);
                    //listModel.remove(index+1);
                    //GL.setAvoidProcListValueChanged(-1);
                    listModel.set(index,new ListEntry(" [Finished]   " + listProcRunning.get(i).toString(), "Finished",listProcRunning.get(i).path,image2));
                    
                    listProcRunning.remove(i);        
                }
            }
            //System.out.format("End Check!\n");    
            //System.out.format("Checking waiting !%n");
            while ((listProcRunning.size()<GS.getMaxSizelistProcRunning())&&(listProcWaiting.size()>0)){
                try{
                
                    Runtime rt = Runtime.getRuntime();
                    Process pr = rt.exec(listProcWaiting.get(0).cmd);
                    ElProcRunning tmp= new ElProcRunning(listProcWaiting.get(0).type,listProcWaiting.get(0).path,pr,listProcWaiting.get(0).pos);
                    listProcRunning.add(tmp);
                    java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/running.png");
                    ImageIcon image2 = new ImageIcon(imgURL);
                    //listModel.remove(listProcWaiting.get(0).pos);
                    //GL.setAvoidProcListValueChanged(-1);
                    listModel.set(listProcWaiting.get(0).pos,new ListEntry(" [Running]   " +  listProcWaiting.get(0).toString(),"Running", listProcWaiting.get(0).path,image2));
                    listProcWaiting.remove(0);
                    //System.out.format("Size:"+listProcRunning.size()+"\n");
                } 
                catch(Exception e) {
                    JOptionPane.showMessageDialog(command_panel_ch, e.toString(),"Error execution",JOptionPane.ERROR_MESSAGE);
                    System.out.println(e.toString());
                }
            }
            //System.out.format("End Check!\n"); 
            if (listProcRunning.size()==0){
                 //System.out.format("End TimerTask\n");
                 t.cancel();
            }
                
        }
    }
  
  
private void expandAllNodes(JTree tree, int startingIndex, int rowCount){
    for(int i=startingIndex;i<rowCount;++i){
        tree.expandRow(i);
    }

    if(tree.getRowCount()!=rowCount){
        expandAllNodes(tree, rowCount, tree.getRowCount());
    }
}  
  

 public static synchronized long getPidOfProcess(Process p) {
    long pid = -1;

    try {
      if (p.getClass().getName().equals("java.lang.UNIXProcess")) {
        Field f = p.getClass().getDeclaredField("pid");
        f.setAccessible(true);
        pid = f.getLong(p);
        f.setAccessible(false);
      }
    } catch (Exception e) {
      pid = -1;
    }
    return pid;
  }

 
ArrayList <ElProcRunning> listProcRunning =  new  ArrayList <ElProcRunning> ();
ArrayList <ElProcWaiting> listProcWaiting = new  ArrayList <ElProcWaiting> ();
DefaultListModel<ListEntry> listModel= new DefaultListModel <ListEntry> ();


//int MaxSizelistProcRunning=1; 
GlobalStatus GL =new GlobalStatus();
//String DefaultThread="8";
GlobalSetting GS =new GlobalSetting();




public class DefaultContextMenu extends JPopupMenu
{
    private Clipboard clipboard;

    private UndoManager undoManager;

    private JMenuItem undo;
    private JMenuItem redo;
    private JMenuItem cut;
    private JMenuItem copy;
    private JMenuItem paste;
    private JMenuItem delete;
    private JMenuItem selectAll;

    private JTextComponent jTextComponent;
    private static final long serialVersionUID = 5778212333L;
    
    public DefaultContextMenu()
    {
        java.net.URL imgURL;
        
        undoManager = new UndoManager();
        clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        undo = new JMenuItem("Undo");
        undo.setEnabled(false);
        imgURL = getClass().getResource("/pkg4seqgui/images/undomenu.png");
        ImageIcon imageundo = new ImageIcon(imgURL);
        undo.setIcon(imageundo);
        undo.setAccelerator(KeyStroke.getKeyStroke("control Z"));
        undo.addActionListener(event -> undoManager.undo());

        add(undo);

        redo = new JMenuItem("Redo");
        redo.setEnabled(false);
        imgURL = getClass().getResource("/pkg4seqgui/images/redomenu.png");
        ImageIcon imageredo = new ImageIcon(imgURL);
        redo.setIcon(imageredo);
        redo.setAccelerator(KeyStroke.getKeyStroke("control Y"));
        redo.addActionListener(event -> undoManager.redo());

        add(redo);

        add(new JSeparator());

        cut = new JMenuItem("Cut");
        cut.setEnabled(false);
        imgURL = getClass().getResource("/pkg4seqgui/images/cutmenu.png");
        ImageIcon imagecut = new ImageIcon(imgURL);
        cut.setIcon(imagecut);
        cut.setAccelerator(KeyStroke.getKeyStroke("control X"));
        cut.addActionListener(event -> jTextComponent.cut());

        add(cut);

        copy = new JMenuItem("Copy");
        copy.setEnabled(false);
        imgURL = getClass().getResource("/pkg4seqgui/images/copymenu.png");
        ImageIcon imagecopy = new ImageIcon(imgURL);
        copy.setIcon(imagecopy);
        copy.setAccelerator(KeyStroke.getKeyStroke("control C"));
        copy.addActionListener(event -> jTextComponent.copy());

        add(copy);

        paste = new JMenuItem("Paste");
        paste.setEnabled(false);
        imgURL = getClass().getResource("/pkg4seqgui/images/pastemenu.png");
        ImageIcon imagepaste = new ImageIcon(imgURL);
        paste.setIcon(imagepaste);
        paste.setAccelerator(KeyStroke.getKeyStroke("control V"));
        paste.addActionListener(event -> jTextComponent.paste());

        add(paste);

        delete = new JMenuItem("Delete");
        delete.setEnabled(false);
        imgURL = getClass().getResource("/pkg4seqgui/images/deletemenu.png");
        ImageIcon imagedelete = new ImageIcon(imgURL);
        delete.setIcon(imagedelete);
        delete.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0));
        delete.addActionListener(event -> jTextComponent.replaceSelection(""));

        add(delete);

        add(new JSeparator());

        selectAll = new JMenuItem("Select All");
        selectAll.setEnabled(false);
        selectAll.setAccelerator(KeyStroke.getKeyStroke("control A"));
        selectAll.addActionListener(event -> jTextComponent.selectAll());

        add(selectAll);
    }

    public void add(JTextComponent jTextComponent)
    {
        jTextComponent.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyPressed(KeyEvent pressedEvent)
            {
                if ((pressedEvent.getKeyCode() == KeyEvent.VK_Z)
                        && ((pressedEvent.getModifiers() & KeyEvent.CTRL_MASK) != 0))
                {
                    if (undoManager.canUndo())
                    {
                        undoManager.undo();
                    }
                }

                if ((pressedEvent.getKeyCode() == KeyEvent.VK_Y)
                        && ((pressedEvent.getModifiers() & KeyEvent.CTRL_MASK) != 0))
                {
                    if (undoManager.canRedo())
                    {
                        undoManager.redo();
                    }
                }
            }
        });

        jTextComponent.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseReleased(MouseEvent releasedEvent)
            {
                if (releasedEvent.getButton() == MouseEvent.BUTTON3)
                {
                    processClick(releasedEvent);
                }
            }
        });

        jTextComponent.getDocument().addUndoableEditListener(event -> undoManager.addEdit(event.getEdit()));
    }

    private void processClick(MouseEvent event)
    {
        jTextComponent = (JTextComponent) event.getSource();
        jTextComponent.requestFocus();

        boolean enableUndo = undoManager.canUndo();
        boolean enableRedo = undoManager.canRedo();
        boolean enableCut = false;
        boolean enableCopy = false;
        boolean enablePaste = false;
        boolean enableDelete = false;
        boolean enableSelectAll = false;

        String selectedText = jTextComponent.getSelectedText();
        String text = jTextComponent.getText();

        if (text != null)
        {
            if (text.length() > 0)
            {
                enableSelectAll = true;
            }
        }

        if (selectedText != null)
        {
            if (selectedText.length() > 0)
            {
                enableCut = true;
                enableCopy = true;
                enableDelete = true;
            }
        }

        if (clipboard.isDataFlavorAvailable(DataFlavor.stringFlavor) && jTextComponent.isEnabled())
        {
            enablePaste = true;
        }

        undo.setEnabled(enableUndo);
        redo.setEnabled(enableRedo);
        cut.setEnabled(enableCut);
        copy.setEnabled(enableCopy);
        paste.setEnabled(enablePaste);
        delete.setEnabled(enableDelete);
        selectAll.setEnabled(enableSelectAll);

        show(jTextComponent, event.getX(), event.getY());
    }
}

DefaultContextMenu contextMenu = new DefaultContextMenu();

  static String prefRootNode = "/org/unito/CircHunterGUI";
   // Preferences
    public static Preferences getPreferences() {
        assert prefRootNode != null;
        Preferences root = Preferences.userRoot();
        return root.node(prefRootNode);
    } 

}

